{
  "header": { "title": "Built-in Types — Python 3.12.5 documentation" },
  "webpage_contents": [
    {
      "header": {
        "title": "Built-in Types — Python 3.12.5 documentation",
        "page_url": "https://docs.python.org/3/library/stdtypes.html"
      },
      "contents": "Built-in Constants Built-in Exceptions The following sections describe the standard types that are built into the\ninterpreter. The principal built-in types are numerics, sequences, mappings, classes,\ninstances and exceptions. Some collection classes are mutable.  The methods that add, subtract, or\nrearrange their members in place, and don’t return a specific item, never return\nthe collection instance itself but None. Some operations are supported by several object types; in particular,\npractically all objects can be compared for equality, tested for truth\nvalue, and converted to a string (with the repr() function or the\nslightly different str() function).  The latter function is implicitly\nused when an object is written by the print() function. Any object can be tested for truth value, for use in an if or\nwhile condition or as operand of the Boolean operations below. By default, an object is considered true unless its class defines either a\n__bool__() method that returns False or a\n__len__() method that\nreturns zero, when called with the object. [1]  Here are most of the built-in\nobjects considered false: constants defined to be false: None and False zero of any numeric type: 0, 0.0, 0j, Decimal(0),\nFraction(0, 1) empty sequences and collections: '', (), [], {}, set(),\nrange(0) Operations and built-in functions that have a Boolean result always return 0\nor False for false and 1 or True for true, unless otherwise stated.\n(Important exception: the Boolean operations or and and always return\none of their operands.) These are the Boolean operations, ordered by ascending priority: Operation Result Notes x or y if x is true, then x, else\ny (1) x and y if x is false, then x, else\ny (2) not x if x is false, then True,\nelse False (3) Notes: This is a short-circuit operator, so it only evaluates the second\nargument if the first one is false. This is a short-circuit operator, so it only evaluates the second\nargument if the first one is true. not has a lower priority than non-Boolean operators, so not a == b is\ninterpreted as not (a == b), and a == not b is a syntax error. There are eight comparison operations in Python.  They all have the same\npriority (which is higher than that of the Boolean operations).  Comparisons can\nbe chained arbitrarily; for example, x < y <= z is equivalent to x < y and\ny <= z, except that y is evaluated only once (but in both cases z is not\nevaluated at all when x < y is found to be false). This table summarizes the comparison operations: Operation Meaning < strictly less than <= less than or equal > strictly greater than >= greater than or equal == equal != not equal is object identity is not negated object identity Objects of different types, except different numeric types, never compare equal.\nThe == operator is always defined but for some object types (for example,\nclass objects) is equivalent to is. The <, <=, > and >=\noperators are only defined where they make sense; for example, they raise a\nTypeError exception when one of the arguments is a complex number. Non-identical instances of a class normally compare as non-equal unless the\nclass defines the __eq__() method. Instances of a class cannot be ordered with respect to other instances of the\nsame class, or other types of object, unless the class defines enough of the\nmethods __lt__(), __le__(), __gt__(), and\n__ge__() (in general, __lt__() and\n__eq__() are sufficient, if you want the conventional meanings of the\ncomparison operators). The behavior of the is and is not operators cannot be\ncustomized; also they can be applied to any two objects and never raise an\nexception. Two more operations with the same syntactic priority, in and\nnot in, are supported by types that are iterable or\nimplement the __contains__() method. There are three distinct numeric types: integers, floating-point\nnumbers, and complex numbers.  In addition, Booleans are a\nsubtype of integers.  Integers have unlimited precision.  Floating-point\nnumbers are usually implemented using double in C; information\nabout the precision and internal representation of floating-point\nnumbers for the machine on which your program is running is available\nin sys.float_info.  Complex numbers have a real and imaginary\npart, which are each a floating-point number.  To extract these parts\nfrom a complex number z, use z.real and z.imag. (The standard\nlibrary includes the additional numeric types fractions.Fraction, for\nrationals, and decimal.Decimal, for floating-point numbers with\nuser-definable precision.) Numbers are created by numeric literals or as the result of built-in functions\nand operators.  Unadorned integer literals (including hex, octal and binary\nnumbers) yield integers.  Numeric literals containing a decimal point or an\nexponent sign yield floating-point numbers.  Appending 'j' or 'J' to a\nnumeric literal yields an imaginary number (a complex number with a zero real\npart) which you can add to an integer or float to get a complex number with real\nand imaginary parts. Python fully supports mixed arithmetic: when a binary arithmetic operator has\noperands of different numeric types, the operand with the “narrower” type is\nwidened to that of the other, where integer is narrower than floating point,\nwhich is narrower than complex. A comparison between numbers of different types\nbehaves as though the exact values of those numbers were being compared. [2] The constructors int(), float(), and\ncomplex() can be used to produce numbers of a specific type. All numeric types (except complex) support the following operations (for priorities of\nthe operations, see Operator precedence): Operation Result Notes Full documentation x + y sum of x and y x - y difference of x and y x * y product of x and y x / y quotient of x and y x // y floored quotient of x and\ny (1)(2) x % y remainder of x / y (2) -x x negated +x x unchanged abs(x) absolute value or magnitude of\nx abs() int(x) x converted to integer (3)(6) int() float(x) x converted to floating point (4)(6) float() complex(re, im) a complex number with real part\nre, imaginary part im.\nim defaults to zero. (6) complex() c.conjugate() conjugate of the complex number\nc divmod(x, y) the pair (x // y, x % y) (2) divmod() pow(x, y) x to the power y (5) pow() x ** y x to the power y (5) Notes: Also referred to as integer division.  For operands of type int,\nthe result has type int.  For operands of type float,\nthe result has type float.  In general, the result is a whole\ninteger, though the result’s type is not necessarily int.  The result is\nalways rounded towards minus infinity: 1//2 is 0, (-1)//2 is\n-1, 1//(-2) is -1, and (-1)//(-2) is 0. Not for complex numbers.  Instead convert to floats using abs() if\nappropriate. Conversion from float to int truncates, discarding the\nfractional part. See functions math.floor() and math.ceil() for\nalternative conversions. float also accepts the strings “nan” and “inf” with an optional prefix “+”\nor “-” for Not a Number (NaN) and positive or negative infinity. Python defines pow(0, 0) and 0 ** 0 to be 1, as is common for\nprogramming languages. The numeric literals accepted include the digits 0 to 9 or any\nUnicode equivalent (code points with the Nd property). See the Unicode Standard\nfor a complete list of code points with the Nd property. All numbers.Real types (int and float) also include\nthe following operations: Operation Result math.trunc(x) x truncated to Integral round(x[,\nn]) x rounded to n digits,\nrounding half to even. If n is\nomitted, it defaults to 0. math.floor(x) the greatest Integral\n<= x math.ceil(x) the least Integral >= x For additional numeric operations see the math and cmath\nmodules. Bitwise operations only make sense for integers. The result of bitwise\noperations is calculated as though carried out in two’s complement with an\ninfinite number of sign bits. The priorities of the binary bitwise operations are all lower than the numeric\noperations and higher than the comparisons; the unary operation ~ has the\nsame priority as the other unary numeric operations (+ and -). This table lists the bitwise operations sorted in ascending priority: Operation Result Notes x | y bitwise or of x and\ny (4) x ^ y bitwise exclusive or of\nx and y (4) x & y bitwise and of x and\ny (4) x << n x shifted left by n bits (1)(2) x >> n x shifted right by n bits (1)(3) ~x the bits of x inverted Notes: Negative shift counts are illegal and cause a ValueError to be raised. A left shift by n bits is equivalent to multiplication by pow(2, n). A right shift by n bits is equivalent to floor division by pow(2, n). Performing these calculations with at least one extra sign extension bit in\na finite two’s complement representation (a working bit-width of\n1 + max(x.bit_length(), y.bit_length()) or more) is sufficient to get the\nsame result as if there were an infinite number of sign bits. The int type implements the numbers.Integral abstract base\nclass. In addition, it provides a few more methods: Return the number of bits necessary to represent an integer in binary,\nexcluding the sign and leading zeros: More precisely, if x is nonzero, then x.bit_length() is the\nunique positive integer k such that 2**(k-1) <= abs(x) < 2**k.\nEquivalently, when abs(x) is small enough to have a correctly\nrounded logarithm, then k = 1 + int(log(abs(x), 2)).\nIf x is zero, then x.bit_length() returns 0. Equivalent to: Added in version 3.1. Return the number of ones in the binary representation of the absolute\nvalue of the integer. This is also known as the population count.\nExample: Equivalent to: Added in version 3.10. Return an array of bytes representing an integer. The integer is represented using length bytes, and defaults to 1.  An\nOverflowError is raised if the integer is not representable with\nthe given number of bytes. The byteorder argument determines the byte order used to represent the\ninteger, and defaults to \"big\".  If byteorder is\n\"big\", the most significant byte is at the beginning of the byte\narray.  If byteorder is \"little\", the most significant byte is at\nthe end of the byte array. The signed argument determines whether two’s complement is used to\nrepresent the integer.  If signed is False and a negative integer is\ngiven, an OverflowError is raised. The default value for signed\nis False. The default values can be used to conveniently turn an integer into a\nsingle byte object: However, when using the default arguments, don’t try\nto convert a value greater than 255 or you’ll get an OverflowError. Equivalent to: Added in version 3.2. Changed in version 3.11: Added default argument values for length and byteorder. Return the integer represented by the given array of bytes. The argument bytes must either be a bytes-like object or an\niterable producing bytes. The byteorder argument determines the byte order used to represent the\ninteger, and defaults to \"big\".  If byteorder is\n\"big\", the most significant byte is at the beginning of the byte\narray.  If byteorder is \"little\", the most significant byte is at\nthe end of the byte array.  To request the native byte order of the host\nsystem, use sys.byteorder as the byte order value. The signed argument indicates whether two’s complement is used to\nrepresent the integer. Equivalent to: Added in version 3.2. Changed in version 3.11: Added default argument value for byteorder. Return a pair of integers whose ratio is equal to the original\ninteger and has a positive denominator.  The integer ratio of integers\n(whole numbers) is always the integer as the numerator and 1 as the\ndenominator. Added in version 3.8. Returns True. Exists for duck type compatibility with float.is_integer(). Added in version 3.12. The float type implements the numbers.Real abstract base\nclass. float also has the following additional methods. Return a pair of integers whose ratio is exactly equal to the\noriginal float. The ratio is in lowest terms and has a positive denominator.  Raises\nOverflowError on infinities and a ValueError on\nNaNs. Return True if the float instance is finite with integral\nvalue, and False otherwise: Two methods support conversion to\nand from hexadecimal strings.  Since Python’s floats are stored\ninternally as binary numbers, converting a float to or from a\ndecimal string usually involves a small rounding error.  In\ncontrast, hexadecimal strings allow exact representation and\nspecification of floating-point numbers.  This can be useful when\ndebugging, and in numerical work. Return a representation of a floating-point number as a hexadecimal\nstring.  For finite floating-point numbers, this representation\nwill always include a leading 0x and a trailing p and\nexponent. Class method to return the float represented by a hexadecimal\nstring s.  The string s may have leading and trailing\nwhitespace. Note that float.hex() is an instance method, while\nfloat.fromhex() is a class method. A hexadecimal string takes the form: where the optional sign may by either + or -, integer\nand fraction are strings of hexadecimal digits, and exponent\nis a decimal integer with an optional leading sign.  Case is not\nsignificant, and there must be at least one hexadecimal digit in\neither the integer or the fraction.  This syntax is similar to the\nsyntax specified in section 6.4.4.2 of the C99 standard, and also to\nthe syntax used in Java 1.5 onwards.  In particular, the output of\nfloat.hex() is usable as a hexadecimal floating-point literal in\nC or Java code, and hexadecimal strings produced by C’s %a format\ncharacter or Java’s Double.toHexString are accepted by\nfloat.fromhex(). Note that the exponent is written in decimal rather than hexadecimal,\nand that it gives the power of 2 by which to multiply the coefficient.\nFor example, the hexadecimal string 0x3.a7p10 represents the\nfloating-point number (3 + 10./16 + 7./16**2) * 2.0**10, or\n3740.0: Applying the reverse conversion to 3740.0 gives a different\nhexadecimal string representing the same number: For numbers x and y, possibly of different types, it’s a requirement\nthat hash(x) == hash(y) whenever x == y (see the __hash__()\nmethod documentation for more details).  For ease of implementation and\nefficiency across a variety of numeric types (including int,\nfloat, decimal.Decimal and fractions.Fraction)\nPython’s hash for numeric types is based on a single mathematical function\nthat’s defined for any rational number, and hence applies to all instances of\nint and fractions.Fraction, and all finite instances of\nfloat and decimal.Decimal.  Essentially, this function is\ngiven by reduction modulo P for a fixed prime P.  The value of P is\nmade available to Python as the modulus attribute of\nsys.hash_info. CPython implementation detail: Currently, the prime used is P = 2**31 - 1 on machines with 32-bit C\nlongs and P = 2**61 - 1 on machines with 64-bit C longs. Here are the rules in detail: If x = m / n is a nonnegative rational number and n is not divisible\nby P, define hash(x) as m * invmod(n, P) % P, where invmod(n,\nP) gives the inverse of n modulo P. If x = m / n is a nonnegative rational number and n is\ndivisible by P (but m is not) then n has no inverse\nmodulo P and the rule above doesn’t apply; in this case define\nhash(x) to be the constant value sys.hash_info.inf. If x = m / n is a negative rational number define hash(x)\nas -hash(-x).  If the resulting hash is -1, replace it with\n-2. The particular values sys.hash_info.inf and -sys.hash_info.inf\nare used as hash values for positive\ninfinity or negative infinity (respectively). For a complex number z, the hash values of the real\nand imaginary parts are combined by computing hash(z.real) +\nsys.hash_info.imag * hash(z.imag), reduced modulo\n2**sys.hash_info.width so that it lies in\nrange(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width -\n1)).  Again, if the result is -1, it’s replaced with -2. To clarify the above rules, here’s some example Python code,\nequivalent to the built-in hash, for computing the hash of a rational\nnumber, float, or complex: Booleans represent truth values. The bool type has exactly two\nconstant instances: True and False. The built-in function bool()  converts any value to a boolean, if the\nvalue can be interpreted as a truth value (see section Truth Value Testing above). For logical operations, use the boolean operators and,\nor and not.\nWhen applying the bitwise operators &, |, ^ to two booleans, they\nreturn a bool equivalent to the logical operations “and”, “or”, “xor”. However,\nthe logical operators and, or and != should be preferred\nover &, | and ^. Deprecated since version 3.12: The use of the bitwise inversion operator ~ is deprecated and will\nraise an error in Python 3.14. bool is a subclass of int (see Numeric Types — int, float, complex). In\nmany numeric contexts, False and True behave like the integers 0 and 1, respectively.\nHowever, relying on this is discouraged; explicitly convert using int()\ninstead. Python supports a concept of iteration over containers.  This is implemented\nusing two distinct methods; these are used to allow user-defined classes to\nsupport iteration.  Sequences, described below in more detail, always support\nthe iteration methods. One method needs to be defined for container objects to provide iterable\nsupport: Return an iterator object.  The object is required to support the\niterator protocol described below.  If a container supports different types\nof iteration, additional methods can be provided to specifically request\niterators for those iteration types.  (An example of an object supporting\nmultiple forms of iteration would be a tree structure which supports both\nbreadth-first and depth-first traversal.)  This method corresponds to the\ntp_iter slot of the type structure for Python\nobjects in the Python/C API. The iterator objects themselves are required to support the following two\nmethods, which together form the iterator protocol: Return the iterator object itself.  This is required to allow both\ncontainers and iterators to be used with the for and\nin statements.  This method corresponds to the\ntp_iter slot of the type structure for Python\nobjects in the Python/C API. Return the next item from the iterator.  If there are no further\nitems, raise the StopIteration exception.  This method corresponds to\nthe tp_iternext slot of the type structure for\nPython objects in the Python/C API. Python defines several iterator objects to support iteration over general and\nspecific sequence types, dictionaries, and other more specialized forms.  The\nspecific types are not important beyond their implementation of the iterator\nprotocol. Once an iterator’s __next__() method raises\nStopIteration, it must continue to do so on subsequent calls.\nImplementations that do not obey this property are deemed broken. Python’s generators provide a convenient way to implement the iterator\nprotocol.  If a container object’s __iter__() method is implemented as a\ngenerator, it will automatically return an iterator object (technically, a\ngenerator object) supplying the __iter__() and __next__()\nmethods.\nMore information about generators can be found in the documentation for\nthe yield expression. There are three basic sequence types: lists, tuples, and range objects.\nAdditional sequence types tailored for processing of\nbinary data and text strings are\ndescribed in dedicated sections. The operations in the following table are supported by most sequence types,\nboth mutable and immutable. The collections.abc.Sequence ABC is\nprovided to make it easier to correctly implement these operations on\ncustom sequence types. This table lists the sequence operations sorted in ascending priority.  In the\ntable, s and t are sequences of the same type, n, i, j and k are\nintegers and x is an arbitrary object that meets any type and value\nrestrictions imposed by s. The in and not in operations have the same priorities as the\ncomparison operations. The + (concatenation) and * (repetition)\noperations have the same priority as the corresponding numeric operations. [3] Operation Result Notes x in s True if an item of s is\nequal to x, else False (1) x not in s False if an item of s is\nequal to x, else True (1) s + t the concatenation of s and\nt (6)(7) s * n or\nn * s equivalent to adding s to\nitself n times (2)(7) s[i] ith item of s, origin 0 (3) s[i:j] slice of s from i to j (3)(4) s[i:j:k] slice of s from i to j\nwith step k (3)(5) len(s) length of s min(s) smallest item of s max(s) largest item of s s.index(x[, i[, j]]) index of the first occurrence\nof x in s (at or after\nindex i and before index j) (8) s.count(x) total number of occurrences of\nx in s Sequences of the same type also support comparisons.  In particular, tuples\nand lists are compared lexicographically by comparing corresponding elements.\nThis means that to compare equal, every element must compare equal and the\ntwo sequences must be of the same type and have the same length.  (For full\ndetails see Comparisons in the language reference.) Forward and reversed iterators over mutable sequences access values using an\nindex.  That index will continue to march forward (or backward) even if the\nunderlying sequence is mutated.  The iterator terminates only when an\nIndexError or a StopIteration is encountered (or when the index\ndrops below zero). Notes: While the in and not in operations are used only for simple\ncontainment testing in the general case, some specialised sequences\n(such as str, bytes and bytearray) also use\nthem for subsequence testing: Values of n less than 0 are treated as 0 (which yields an empty\nsequence of the same type as s).  Note that items in the sequence s\nare not copied; they are referenced multiple times.  This often haunts\nnew Python programmers; consider: What has happened is that [[]] is a one-element list containing an empty\nlist, so all three elements of [[]] * 3 are references to this single empty\nlist.  Modifying any of the elements of lists modifies this single list.\nYou can create a list of different lists this way: Further explanation is available in the FAQ entry\nHow do I create a multidimensional list?. If i or j is negative, the index is relative to the end of sequence s:\nlen(s) + i or len(s) + j is substituted.  But note that -0 is\nstill 0. The slice of s from i to j is defined as the sequence of items with index\nk such that i <= k < j.  If i or j is greater than len(s), use\nlen(s).  If i is omitted or None, use 0.  If j is omitted or\nNone, use len(s).  If i is greater than or equal to j, the slice is\nempty. The slice of s from i to j with step k is defined as the sequence of\nitems with index  x = i + n*k such that 0 <= n < (j-i)/k.  In other words,\nthe indices are i, i+k, i+2*k, i+3*k and so on, stopping when\nj is reached (but never including j).  When k is positive,\ni and j are reduced to len(s) if they are greater.\nWhen k is negative, i and j are reduced to len(s) - 1 if\nthey are greater.  If i or j are omitted or None, they become\n“end” values (which end depends on the sign of k).  Note, k cannot be zero.\nIf k is None, it is treated like 1. Concatenating immutable sequences always results in a new object.  This\nmeans that building up a sequence by repeated concatenation will have a\nquadratic runtime cost in the total sequence length.  To get a linear\nruntime cost, you must switch to one of the alternatives below: if concatenating str objects, you can build a list and use\nstr.join() at the end or else write to an io.StringIO\ninstance and retrieve its value when complete if concatenating bytes objects, you can similarly use\nbytes.join() or io.BytesIO, or you can do in-place\nconcatenation with a bytearray object.  bytearray\nobjects are mutable and have an efficient overallocation mechanism if concatenating tuple objects, extend a list instead for other types, investigate the relevant class documentation Some sequence types (such as range) only support item sequences\nthat follow specific patterns, and hence don’t support sequence\nconcatenation or repetition. index raises ValueError when x is not found in s.\nNot all implementations support passing the additional arguments i and j.\nThese arguments allow efficient searching of subsections of the sequence. Passing\nthe extra arguments is roughly equivalent to using s[i:j].index(x), only\nwithout copying any data and with the returned index being relative to\nthe start of the sequence rather than the start of the slice. The only operation that immutable sequence types generally implement that is\nnot also implemented by mutable sequence types is support for the hash()\nbuilt-in. This support allows immutable sequences, such as tuple instances, to\nbe used as dict keys and stored in set and frozenset\ninstances. Attempting to hash an immutable sequence that contains unhashable values will\nresult in TypeError. The operations in the following table are defined on mutable sequence types.\nThe collections.abc.MutableSequence ABC is provided to make it\neasier to correctly implement these operations on custom sequence types. In the table s is an instance of a mutable sequence type, t is any\niterable object and x is an arbitrary object that meets any type\nand value restrictions imposed by s (for example, bytearray only\naccepts integers that meet the value restriction 0 <= x <= 255). Operation Result Notes s[i] = x item i of s is replaced by\nx s[i:j] = t slice of s from i to j\nis replaced by the contents of\nthe iterable t del s[i:j] same as s[i:j] = [] s[i:j:k] = t the elements of s[i:j:k]\nare replaced by those of t (1) del s[i:j:k] removes the elements of\ns[i:j:k] from the list s.append(x) appends x to the end of the\nsequence (same as\ns[len(s):len(s)] = [x]) s.clear() removes all items from s\n(same as del s[:]) (5) s.copy() creates a shallow copy of s\n(same as s[:]) (5) s.extend(t) or\ns += t extends s with the\ncontents of t (for the\nmost part the same as\ns[len(s):len(s)] = t) s *= n updates s with its contents\nrepeated n times (6) s.insert(i, x) inserts x into s at the\nindex given by i\n(same as s[i:i] = [x]) s.pop() or s.pop(i) retrieves the item at i and\nalso removes it from s (2) s.remove(x) removes the first item from\ns where s[i] is equal to\nx (3) s.reverse() reverses the items of s in\nplace (4) Notes: If k is not equal to 1, t must have the same length as the slice it is replacing. The optional argument i defaults to -1, so that by default the last\nitem is removed and returned. remove() raises ValueError when x is not found in s. The reverse() method modifies the sequence in place for economy of\nspace when reversing a large sequence.  To remind users that it operates by\nside effect, it does not return the reversed sequence. clear() and copy() are included for consistency with the\ninterfaces of mutable containers that don’t support slicing operations\n(such as dict and set). copy() is not part of the\ncollections.abc.MutableSequence ABC, but most concrete\nmutable sequence classes provide it. Added in version 3.3: clear() and copy() methods. The value n is an integer, or an object implementing\n__index__().  Zero and negative values of n clear\nthe sequence.  Items in the sequence are not copied; they are referenced\nmultiple times, as explained for s * n under Common Sequence Operations. Lists are mutable sequences, typically used to store collections of\nhomogeneous items (where the precise degree of similarity will vary by\napplication). Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list: [] Using square brackets, separating items with commas: [a], [a, b, c] Using a list comprehension: [x for x in iterable] Using the type constructor: list() or list(iterable) The constructor builds a list whose items are the same and in the same\norder as iterable’s items.  iterable may be either a sequence, a\ncontainer that supports iteration, or an iterator object.  If iterable\nis already a list, a copy is made and returned, similar to iterable[:].\nFor example, list('abc') returns ['a', 'b', 'c'] and\nlist( (1, 2, 3) ) returns [1, 2, 3].\nIf no argument is given, the constructor creates a new empty list, []. Many other operations also produce lists, including the sorted()\nbuilt-in. Lists implement all of the common and\nmutable sequence operations. Lists also provide the\nfollowing additional method: This method sorts the list in place, using only < comparisons\nbetween items. Exceptions are not suppressed - if any comparison operations\nfail, the entire sort operation will fail (and the list will likely be left\nin a partially modified state). sort() accepts two arguments that can only be passed by keyword\n(keyword-only arguments): key specifies a function of one argument that is used to extract a\ncomparison key from each list element (for example, key=str.lower).\nThe key corresponding to each item in the list is calculated once and\nthen used for the entire sorting process. The default value of None\nmeans that list items are sorted directly without calculating a separate\nkey value. The functools.cmp_to_key() utility is available to convert a 2.x\nstyle cmp function to a key function. reverse is a boolean value.  If set to True, then the list elements\nare sorted as if each comparison were reversed. This method modifies the sequence in place for economy of space when\nsorting a large sequence.  To remind users that it operates by side\neffect, it does not return the sorted sequence (use sorted() to\nexplicitly request a new sorted list instance). The sort() method is guaranteed to be stable.  A sort is stable if it\nguarantees not to change the relative order of elements that compare equal\n— this is helpful for sorting in multiple passes (for example, sort by\ndepartment, then by salary grade). For sorting examples and a brief sorting tutorial, see Sorting Techniques. CPython implementation detail: While a list is being sorted, the effect of attempting to mutate, or even\ninspect, the list is undefined.  The C implementation of Python makes the\nlist appear empty for the duration, and raises ValueError if it can\ndetect that the list has been mutated during a sort. Tuples are immutable sequences, typically used to store collections of\nheterogeneous data (such as the 2-tuples produced by the enumerate()\nbuilt-in). Tuples are also used for cases where an immutable sequence of\nhomogeneous data is needed (such as allowing storage in a set or\ndict instance). Tuples may be constructed in a number of ways: Using a pair of parentheses to denote the empty tuple: () Using a trailing comma for a singleton tuple: a, or (a,) Separating items with commas: a, b, c or (a, b, c) Using the tuple() built-in: tuple() or tuple(iterable) The constructor builds a tuple whose items are the same and in the same\norder as iterable’s items.  iterable may be either a sequence, a\ncontainer that supports iteration, or an iterator object.  If iterable\nis already a tuple, it is returned unchanged. For example,\ntuple('abc') returns ('a', 'b', 'c') and\ntuple( [1, 2, 3] ) returns (1, 2, 3).\nIf no argument is given, the constructor creates a new empty tuple, (). Note that it is actually the comma which makes a tuple, not the parentheses.\nThe parentheses are optional, except in the empty tuple case, or\nwhen they are needed to avoid syntactic ambiguity. For example,\nf(a, b, c) is a function call with three arguments, while\nf((a, b, c)) is a function call with a 3-tuple as the sole argument. Tuples implement all of the common sequence\noperations. For heterogeneous collections of data where access by name is clearer than\naccess by index, collections.namedtuple() may be a more appropriate\nchoice than a simple tuple object. The range type represents an immutable sequence of numbers and is\ncommonly used for looping a specific number of times in for\nloops. The arguments to the range constructor must be integers (either built-in\nint or any object that implements the __index__() special\nmethod).  If the step argument is omitted, it defaults to 1.\nIf the start argument is omitted, it defaults to 0.\nIf step is zero, ValueError is raised. For a positive step, the contents of a range r are determined by the\nformula r[i] = start + step*i where i >= 0 and\nr[i] < stop. For a negative step, the contents of the range are still determined by\nthe formula r[i] = start + step*i, but the constraints are i >= 0\nand r[i] > stop. A range object will be empty if r[0] does not meet the value\nconstraint. Ranges do support negative indices, but these are interpreted\nas indexing from the end of the sequence determined by the positive\nindices. Ranges containing absolute values larger than sys.maxsize are\npermitted but some features (such as len()) may raise\nOverflowError. Range examples: Ranges implement all of the common sequence operations\nexcept concatenation and repetition (due to the fact that range objects can\nonly represent sequences that follow a strict pattern and repetition and\nconcatenation will usually violate that pattern). The value of the start parameter (or 0 if the parameter was\nnot supplied) The value of the stop parameter The value of the step parameter (or 1 if the parameter was\nnot supplied) The advantage of the range type over a regular list or\ntuple is that a range object will always take the same\n(small) amount of memory, no matter the size of the range it represents (as it\nonly stores the start, stop and step values, calculating individual\nitems and subranges as needed). Range objects implement the collections.abc.Sequence ABC, and provide\nfeatures such as containment tests, element index lookup, slicing and\nsupport for negative indices (see Sequence Types — list, tuple, range): Testing range objects for equality with == and != compares\nthem as sequences.  That is, two range objects are considered equal if\nthey represent the same sequence of values.  (Note that two range\nobjects that compare equal might have different start,\nstop and step attributes, for example\nrange(0) == range(2, 1, 3) or range(0, 3, 2) == range(0, 4, 2).) Changed in version 3.2: Implement the Sequence ABC.\nSupport slicing and negative indices.\nTest int objects for membership in constant time instead of\niterating through all items. Changed in version 3.3: Define ‘==’ and ‘!=’ to compare range objects based on the\nsequence of values they define (instead of comparing based on\nobject identity). Added the start, stop and step\nattributes. See also The linspace recipe\nshows how to implement a lazy version of range suitable for floating-point\napplications. Textual data in Python is handled with str objects, or strings.\nStrings are immutable\nsequences of Unicode code points.  String literals are\nwritten in a variety of ways: Single quotes: 'allows embedded \"double\" quotes' Double quotes: \"allows embedded 'single' quotes\" Triple quoted: '''Three single quotes''', \"\"\"Three double quotes\"\"\" Triple quoted strings may span multiple lines - all associated whitespace will\nbe included in the string literal. String literals that are part of a single expression and have only whitespace\nbetween them will be implicitly converted to a single string literal. That\nis, (\"spam \" \"eggs\") == \"spam eggs\". See String and Bytes literals for more about the various forms of string literal,\nincluding supported escape sequences, and the r (“raw”) prefix that\ndisables most escape sequence processing. Strings may also be created from other objects using the str\nconstructor. Since there is no separate “character” type, indexing a string produces\nstrings of length 1. That is, for a non-empty string s, s[0] == s[0:1]. There is also no mutable string type, but str.join() or\nio.StringIO can be used to efficiently construct strings from\nmultiple fragments. Changed in version 3.3: For backwards compatibility with the Python 2 series, the u prefix is\nonce again permitted on string literals. It has no effect on the meaning\nof string literals and cannot be combined with the r prefix. Return a string version of object.  If object is not\nprovided, returns the empty string.  Otherwise, the behavior of str()\ndepends on whether encoding or errors is given, as follows. If neither encoding nor errors is given, str(object) returns\ntype(object).__str__(object),\nwhich is the “informal” or nicely\nprintable string representation of object.  For string objects, this is\nthe string itself.  If object does not have a __str__()\nmethod, then str() falls back to returning\nrepr(object). If at least one of encoding or errors is given, object should be a\nbytes-like object (e.g. bytes or bytearray).  In\nthis case, if object is a bytes (or bytearray) object,\nthen str(bytes, encoding, errors) is equivalent to\nbytes.decode(encoding, errors).  Otherwise, the bytes\nobject underlying the buffer object is obtained before calling\nbytes.decode().  See Binary Sequence Types — bytes, bytearray, memoryview and\nBuffer Protocol for information on buffer objects. Passing a bytes object to str() without the encoding\nor errors arguments falls under the first case of returning the informal\nstring representation (see also the -b command-line option to\nPython).  For example: For more information on the str class and its methods, see\nText Sequence Type — str and the String Methods section below.  To output\nformatted strings, see the f-strings and Format String Syntax\nsections.  In addition, see the Text Processing Services section. Strings implement all of the common sequence\noperations, along with the additional methods described below. Strings also support two styles of string formatting, one providing a large\ndegree of flexibility and customization (see str.format(),\nFormat String Syntax and Custom String Formatting) and the other based on C\nprintf style formatting that handles a narrower range of types and is\nslightly harder to use correctly, but is often faster for the cases it can\nhandle (printf-style String Formatting). The Text Processing Services section of the standard library covers a number of\nother modules that provide various text related utilities (including regular\nexpression support in the re module). Return a copy of the string with its first character capitalized and the\nrest lowercased. Changed in version 3.8: The first character is now put into titlecase rather than uppercase.\nThis means that characters like digraphs will only have their first\nletter capitalized, instead of the full character. Return a casefolded copy of the string. Casefolded strings may be used for\ncaseless matching. Casefolding is similar to lowercasing but more aggressive because it is\nintended to remove all case distinctions in a string. For example, the German\nlowercase letter 'ß' is equivalent to \"ss\". Since it is already\nlowercase, lower() would do nothing to 'ß'; casefold()\nconverts it to \"ss\". The casefolding algorithm is\ndescribed in section 3.13 ‘Default Case Folding’ of the Unicode Standard. Added in version 3.3. Return centered in a string of length width. Padding is done using the\nspecified fillchar (default is an ASCII space). The original string is\nreturned if width is less than or equal to len(s). Return the number of non-overlapping occurrences of substring sub in the\nrange [start, end].  Optional arguments start and end are\ninterpreted as in slice notation. If sub is empty, returns the number of empty strings between characters\nwhich is the length of the string plus one. Return the string encoded to bytes. encoding defaults to 'utf-8';\nsee Standard Encodings for possible values. errors controls how encoding errors are handled.\nIf 'strict' (the default), a UnicodeError exception is raised.\nOther possible values are 'ignore',\n'replace', 'xmlcharrefreplace', 'backslashreplace' and any\nother name registered via codecs.register_error().\nSee Error Handlers for details. For performance reasons, the value of errors is not checked for validity\nunless an encoding error actually occurs,\nPython Development Mode is enabled\nor a debug build is used. Changed in version 3.1: Added support for keyword arguments. Changed in version 3.9: The value of the errors argument is now checked in Python Development Mode and\nin debug mode. Return True if the string ends with the specified suffix, otherwise return\nFalse.  suffix can also be a tuple of suffixes to look for.  With optional\nstart, test beginning at that position.  With optional end, stop comparing\nat that position. Return a copy of the string where all tab characters are replaced by one or\nmore spaces, depending on the current column and the given tab size.  Tab\npositions occur every tabsize characters (default is 8, giving tab\npositions at columns 0, 8, 16 and so on).  To expand the string, the current\ncolumn is set to zero and the string is examined character by character.  If\nthe character is a tab (\\t), one or more space characters are inserted\nin the result until the current column is equal to the next tab position.\n(The tab character itself is not copied.)  If the character is a newline\n(\\n) or return (\\r), it is copied and the current column is reset to\nzero.  Any other character is copied unchanged and the current column is\nincremented by one regardless of how the character is represented when\nprinted. Return the lowest index in the string where substring sub is found within\nthe slice s[start:end].  Optional arguments start and end are\ninterpreted as in slice notation.  Return -1 if sub is not found. Note The find() method should be used only if you need to know the\nposition of sub.  To check if sub is a substring or not, use the\nin operator: Perform a string formatting operation.  The string on which this method is\ncalled can contain literal text or replacement fields delimited by braces\n{}.  Each replacement field contains either the numeric index of a\npositional argument, or the name of a keyword argument.  Returns a copy of\nthe string where each replacement field is replaced with the string value of\nthe corresponding argument. See Format String Syntax for a description of the various formatting options\nthat can be specified in format strings. Note When formatting a number (int, float, complex,\ndecimal.Decimal and subclasses) with the n type\n(ex: '{:n}'.format(1234)), the function temporarily sets the\nLC_CTYPE locale to the LC_NUMERIC locale to decode\ndecimal_point and thousands_sep fields of localeconv() if\nthey are non-ASCII or longer than 1 byte, and the LC_NUMERIC locale is\ndifferent than the LC_CTYPE locale.  This temporary change affects\nother threads. Changed in version 3.7: When formatting a number with the n type, the function sets\ntemporarily the LC_CTYPE locale to the LC_NUMERIC locale in some\ncases. Similar to str.format(**mapping), except that mapping is\nused directly and not copied to a dict.  This is useful\nif for example mapping is a dict subclass: Added in version 3.2. Like find(), but raise ValueError when the substring is\nnot found. Return True if all characters in the string are alphanumeric and there is at\nleast one character, False otherwise.  A character c is alphanumeric if one\nof the following returns True: c.isalpha(), c.isdecimal(),\nc.isdigit(), or c.isnumeric(). Return True if all characters in the string are alphabetic and there is at least\none character, False otherwise.  Alphabetic characters are those characters defined\nin the Unicode character database as “Letter”, i.e., those with general category\nproperty being one of “Lm”, “Lt”, “Lu”, “Ll”, or “Lo”.  Note that this is different\nfrom the Alphabetic property defined in the section 4.10 ‘Letters, Alphabetic, and\nIdeographic’ of the Unicode Standard. Return True if the string is empty or all characters in the string are ASCII,\nFalse otherwise.\nASCII characters have code points in the range U+0000-U+007F. Added in version 3.7. Return True if all characters in the string are decimal\ncharacters and there is at least one character, False\notherwise. Decimal characters are those that can be used to form\nnumbers in base 10, e.g. U+0660, ARABIC-INDIC DIGIT\nZERO.  Formally a decimal character is a character in the Unicode\nGeneral Category “Nd”. Return True if all characters in the string are digits and there is at least one\ncharacter, False otherwise.  Digits include decimal characters and digits that need\nspecial handling, such as the compatibility superscript digits.\nThis covers digits which cannot be used to form numbers in base 10,\nlike the Kharosthi numbers.  Formally, a digit is a character that has the\nproperty value Numeric_Type=Digit or Numeric_Type=Decimal. Return True if the string is a valid identifier according to the language\ndefinition, section Identifiers and keywords. keyword.iskeyword() can be used to test whether string s is a reserved\nidentifier, such as def and class. Example: Return True if all cased characters [4] in the string are lowercase and\nthere is at least one cased character, False otherwise. Return True if all characters in the string are numeric\ncharacters, and there is at least one character, False\notherwise. Numeric characters include digit characters, and all characters\nthat have the Unicode numeric value property, e.g. U+2155,\nVULGAR FRACTION ONE FIFTH.  Formally, numeric characters are those with the property\nvalue Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric. Return True if all characters in the string are printable or the string is\nempty, False otherwise.  Nonprintable characters are those characters defined\nin the Unicode character database as “Other” or “Separator”, excepting the\nASCII space (0x20) which is considered printable.  (Note that printable\ncharacters in this context are those which should not be escaped when\nrepr() is invoked on a string.  It has no bearing on the handling of\nstrings written to sys.stdout or sys.stderr.) Return True if there are only whitespace characters in the string and there is\nat least one character, False otherwise. A character is whitespace if in the Unicode character database\n(see unicodedata), either its general category is Zs\n(“Separator, space”), or its bidirectional class is one of WS,\nB, or S. Return True if the string is a titlecased string and there is at least one\ncharacter, for example uppercase characters may only follow uncased characters\nand lowercase characters only cased ones.  Return False otherwise. Return True if all cased characters [4] in the string are uppercase and\nthere is at least one cased character, False otherwise. Return a string which is the concatenation of the strings in iterable.\nA TypeError will be raised if there are any non-string values in\niterable, including bytes objects.  The separator between\nelements is the string providing this method. Return the string left justified in a string of length width. Padding is\ndone using the specified fillchar (default is an ASCII space). The\noriginal string is returned if width is less than or equal to len(s). Return a copy of the string with all the cased characters [4] converted to\nlowercase. The lowercasing algorithm used is\ndescribed in section 3.13 ‘Default Case Folding’ of the Unicode Standard. Return a copy of the string with leading characters removed.  The chars\nargument is a string specifying the set of characters to be removed.  If omitted\nor None, the chars argument defaults to removing whitespace.  The chars\nargument is not a prefix; rather, all combinations of its values are stripped: See str.removeprefix() for a method that will remove a single prefix\nstring rather than all of a set of characters.  For example: This static method returns a translation table usable for str.translate(). If there is only one argument, it must be a dictionary mapping Unicode\nordinals (integers) or characters (strings of length 1) to Unicode ordinals,\nstrings (of arbitrary lengths) or None.  Character keys will then be\nconverted to ordinals. If there are two arguments, they must be strings of equal length, and in the\nresulting dictionary, each character in x will be mapped to the character at\nthe same position in y.  If there is a third argument, it must be a string,\nwhose characters will be mapped to None in the result. Split the string at the first occurrence of sep, and return a 3-tuple\ncontaining the part before the separator, the separator itself, and the part\nafter the separator.  If the separator is not found, return a 3-tuple containing\nthe string itself, followed by two empty strings. If the string starts with the prefix string, return\nstring[len(prefix):]. Otherwise, return a copy of the original\nstring: Added in version 3.9. If the string ends with the suffix string and that suffix is not empty,\nreturn string[:-len(suffix)]. Otherwise, return a copy of the\noriginal string: Added in version 3.9. Return a copy of the string with all occurrences of substring old replaced by\nnew.  If the optional argument count is given, only the first count\noccurrences are replaced. Return the highest index in the string where substring sub is found, such\nthat sub is contained within s[start:end].  Optional arguments start\nand end are interpreted as in slice notation.  Return -1 on failure. Like rfind() but raises ValueError when the substring sub is not\nfound. Return the string right justified in a string of length width. Padding is\ndone using the specified fillchar (default is an ASCII space). The\noriginal string is returned if width is less than or equal to len(s). Split the string at the last occurrence of sep, and return a 3-tuple\ncontaining the part before the separator, the separator itself, and the part\nafter the separator.  If the separator is not found, return a 3-tuple containing\ntwo empty strings, followed by the string itself. Return a list of the words in the string, using sep as the delimiter string.\nIf maxsplit is given, at most maxsplit splits are done, the rightmost\nones.  If sep is not specified or None, any whitespace string is a\nseparator.  Except for splitting from the right, rsplit() behaves like\nsplit() which is described in detail below. Return a copy of the string with trailing characters removed.  The chars\nargument is a string specifying the set of characters to be removed.  If omitted\nor None, the chars argument defaults to removing whitespace.  The chars\nargument is not a suffix; rather, all combinations of its values are stripped: See str.removesuffix() for a method that will remove a single suffix\nstring rather than all of a set of characters.  For example: Return a list of the words in the string, using sep as the delimiter\nstring.  If maxsplit is given, at most maxsplit splits are done (thus,\nthe list will have at most maxsplit+1 elements).  If maxsplit is not\nspecified or -1, then there is no limit on the number of splits\n(all possible splits are made). If sep is given, consecutive delimiters are not grouped together and are\ndeemed to delimit empty strings (for example, '1,,2'.split(',') returns\n['1', '', '2']).  The sep argument may consist of multiple characters\nas a single delimiter (to split with multiple delimiters, use\nre.split()). Splitting an empty string with a specified separator\nreturns ['']. For example: If sep is not specified or is None, a different splitting algorithm is\napplied: runs of consecutive whitespace are regarded as a single separator,\nand the result will contain no empty strings at the start or end if the\nstring has leading or trailing whitespace.  Consequently, splitting an empty\nstring or a string consisting of just whitespace with a None separator\nreturns []. For example: Return a list of the lines in the string, breaking at line boundaries.  Line\nbreaks are not included in the resulting list unless keepends is given and\ntrue. This method splits on the following line boundaries.  In particular, the\nboundaries are a superset of universal newlines. Representation Description \\n Line Feed \\r Carriage Return \\r\\n Carriage Return + Line Feed \\v or \\x0b Line Tabulation \\f or \\x0c Form Feed \\x1c File Separator \\x1d Group Separator \\x1e Record Separator \\x85 Next Line (C1 Control Code) \\u2028 Line Separator \\u2029 Paragraph Separator Changed in version 3.2: \\v and \\f added to list of line boundaries. For example: Unlike split() when a delimiter string sep is given, this\nmethod returns an empty list for the empty string, and a terminal line\nbreak does not result in an extra line: For comparison, split('\\n') gives: Return True if string starts with the prefix, otherwise return False.\nprefix can also be a tuple of prefixes to look for.  With optional start,\ntest string beginning at that position.  With optional end, stop comparing\nstring at that position. Return a copy of the string with the leading and trailing characters removed.\nThe chars argument is a string specifying the set of characters to be removed.\nIf omitted or None, the chars argument defaults to removing whitespace.\nThe chars argument is not a prefix or suffix; rather, all combinations of its\nvalues are stripped: The outermost leading and trailing chars argument values are stripped\nfrom the string. Characters are removed from the leading end until\nreaching a string character that is not contained in the set of\ncharacters in chars. A similar action takes place on the trailing end.\nFor example: Return a copy of the string with uppercase characters converted to lowercase and\nvice versa. Note that it is not necessarily true that\ns.swapcase().swapcase() == s. Return a titlecased version of the string where words start with an uppercase\ncharacter and the remaining characters are lowercase. For example: The algorithm uses a simple language-independent definition of a word as\ngroups of consecutive letters.  The definition works in many contexts but\nit means that apostrophes in contractions and possessives form word\nboundaries, which may not be the desired result: The string.capwords() function does not have this problem, as it\nsplits words on spaces only. Alternatively, a workaround for apostrophes can be constructed using regular\nexpressions: Return a copy of the string in which each character has been mapped through\nthe given translation table.  The table must be an object that implements\nindexing via __getitem__(), typically a mapping or\nsequence.  When indexed by a Unicode ordinal (an integer), the\ntable object can do any of the following: return a Unicode ordinal or a\nstring, to map the character to one or more other characters; return\nNone, to delete the character from the return string; or raise a\nLookupError exception, to map the character to itself. You can use str.maketrans() to create a translation map from\ncharacter-to-character mappings in different formats. See also the codecs module for a more flexible approach to custom\ncharacter mappings. Return a copy of the string with all the cased characters [4] converted to\nuppercase.  Note that s.upper().isupper() might be False if s\ncontains uncased characters or if the Unicode category of the resulting\ncharacter(s) is not “Lu” (Letter, uppercase), but e.g. “Lt” (Letter,\ntitlecase). The uppercasing algorithm used is\ndescribed in section 3.13 ‘Default Case Folding’ of the Unicode Standard. Return a copy of the string left filled with ASCII '0' digits to\nmake a string of length width. A leading sign prefix ('+'/'-')\nis handled by inserting the padding after the sign character rather\nthan before. The original string is returned if width is less than\nor equal to len(s). For example: Note The formatting operations described here exhibit a variety of quirks that\nlead to a number of common errors (such as failing to display tuples and\ndictionaries correctly).  Using the newer formatted string literals, the str.format() interface, or template strings may help avoid these errors.  Each of these\nalternatives provides their own trade-offs and benefits of simplicity,\nflexibility, and/or extensibility. String objects have one unique built-in operation: the % operator (modulo).\nThis is also known as the string formatting or interpolation operator.\nGiven format % values (where format is a string), % conversion\nspecifications in format are replaced with zero or more elements of values.\nThe effect is similar to using the sprintf() in the C language. If format requires a single argument, values may be a single non-tuple\nobject. [5]  Otherwise, values must be a tuple with exactly the number of\nitems specified by the format string, or a single mapping object (for example, a\ndictionary). A conversion specifier contains two or more characters and has the following\ncomponents, which must occur in this order: The '%' character, which marks the start of the specifier. Mapping key (optional), consisting of a parenthesised sequence of characters\n(for example, (somename)). Conversion flags (optional), which affect the result of some conversion\ntypes. Minimum field width (optional).  If specified as an '*' (asterisk), the\nactual width is read from the next element of the tuple in values, and the\nobject to convert comes after the minimum field width and optional precision. Precision (optional), given as a '.' (dot) followed by the precision.  If\nspecified as '*' (an asterisk), the actual precision is read from the next\nelement of the tuple in values, and the value to convert comes after the\nprecision. Length modifier (optional). Conversion type. When the right argument is a dictionary (or other mapping type), then the\nformats in the string must include a parenthesised mapping key into that\ndictionary inserted immediately after the '%' character. The mapping key\nselects the value to be formatted from the mapping.  For example: In this case no * specifiers may occur in a format (since they require a\nsequential parameter list). The conversion flag characters are: Flag Meaning '#' The value conversion will use the “alternate form” (where defined\nbelow). '0' The conversion will be zero padded for numeric values. '-' The converted value is left adjusted (overrides the '0'\nconversion if both are given). ' ' (a space) A blank should be left before a positive number (or empty\nstring) produced by a signed conversion. '+' A sign character ('+' or '-') will precede the conversion\n(overrides a “space” flag). A length modifier (h, l, or L) may be present, but is ignored as it\nis not necessary for Python – so e.g. %ld is identical to %d. The conversion types are: Conversion Meaning Notes 'd' Signed integer decimal. 'i' Signed integer decimal. 'o' Signed octal value. (1) 'u' Obsolete type – it is identical to 'd'. (6) 'x' Signed hexadecimal (lowercase). (2) 'X' Signed hexadecimal (uppercase). (2) 'e' Floating-point exponential format (lowercase). (3) 'E' Floating-point exponential format (uppercase). (3) 'f' Floating-point decimal format. (3) 'F' Floating-point decimal format. (3) 'g' Floating-point format. Uses lowercase exponential\nformat if exponent is less than -4 or not less than\nprecision, decimal format otherwise. (4) 'G' Floating-point format. Uses uppercase exponential\nformat if exponent is less than -4 or not less than\nprecision, decimal format otherwise. (4) 'c' Single character (accepts integer or single\ncharacter string). 'r' String (converts any Python object using\nrepr()). (5) 's' String (converts any Python object using\nstr()). (5) 'a' String (converts any Python object using\nascii()). (5) '%' No argument is converted, results in a '%'\ncharacter in the result. Notes: The alternate form causes a leading octal specifier ('0o') to be\ninserted before the first digit. The alternate form causes a leading '0x' or '0X' (depending on whether\nthe 'x' or 'X' format was used) to be inserted before the first digit. The alternate form causes the result to always contain a decimal point, even if\nno digits follow it. The precision determines the number of digits after the decimal point and\ndefaults to 6. The alternate form causes the result to always contain a decimal point, and\ntrailing zeroes are not removed as they would otherwise be. The precision determines the number of significant digits before and after the\ndecimal point and defaults to 6. If precision is N, the output is truncated to N characters. See PEP 237. Since Python strings have an explicit length, %s conversions do not assume\nthat '\\0' is the end of the string. Changed in version 3.1: %f conversions for numbers whose absolute value is over 1e50 are no\nlonger replaced by %g conversions. The core built-in types for manipulating binary data are bytes and\nbytearray. They are supported by memoryview which uses\nthe buffer protocol to access the memory of other\nbinary objects without needing to make a copy. The array module supports efficient storage of basic data types like\n32-bit integers and IEEE754 double-precision floating values. Bytes objects are immutable sequences of single bytes. Since many major\nbinary protocols are based on the ASCII text encoding, bytes objects offer\nseveral methods that are only valid when working with ASCII compatible\ndata and are closely related to string objects in a variety of other ways. Firstly, the syntax for bytes literals is largely the same as that for string\nliterals, except that a b prefix is added: Single quotes: b'still allows embedded \"double\" quotes' Double quotes: b\"still allows embedded 'single' quotes\" Triple quoted: b'''3 single quotes''', b\"\"\"3 double quotes\"\"\" Only ASCII characters are permitted in bytes literals (regardless of the\ndeclared source code encoding). Any binary values over 127 must be entered\ninto bytes literals using the appropriate escape sequence. As with string literals, bytes literals may also use a r prefix to disable\nprocessing of escape sequences. See String and Bytes literals for more about the various\nforms of bytes literal, including supported escape sequences. While bytes literals and representations are based on ASCII text, bytes\nobjects actually behave like immutable sequences of integers, with each\nvalue in the sequence restricted such that 0 <= x < 256 (attempts to\nviolate this restriction will trigger ValueError). This is done\ndeliberately to emphasise that while many binary formats include ASCII based\nelements and can be usefully manipulated with some text-oriented algorithms,\nthis is not generally the case for arbitrary binary data (blindly applying\ntext processing algorithms to binary data formats that are not ASCII\ncompatible will usually lead to data corruption). In addition to the literal forms, bytes objects can be created in a number of\nother ways: A zero-filled bytes object of a specified length: bytes(10) From an iterable of integers: bytes(range(20)) Copying existing binary data via the buffer protocol:  bytes(obj) Also see the bytes built-in. Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal\nnumbers are a commonly used format for describing binary data. Accordingly,\nthe bytes type has an additional class method to read data in that format: This bytes class method returns a bytes object, decoding the\ngiven string object.  The string must contain two hexadecimal digits per\nbyte, with ASCII whitespace being ignored. Changed in version 3.7: bytes.fromhex() now skips all ASCII whitespace in the string,\nnot just spaces. A reverse conversion function exists to transform a bytes object into its\nhexadecimal representation. Return a string object containing two hexadecimal digits for each\nbyte in the instance. If you want to make the hex string easier to read, you can specify a\nsingle character separator sep parameter to include in the output.\nBy default, this separator will be included between each byte.\nA second optional bytes_per_sep parameter controls the spacing.\nPositive values calculate the separator position from the right,\nnegative values from the left. Added in version 3.5. Changed in version 3.8: bytes.hex() now supports optional sep and bytes_per_sep\nparameters to insert separators between bytes in the hex output. Since bytes objects are sequences of integers (akin to a tuple), for a bytes\nobject b, b[0] will be an integer, while b[0:1] will be a bytes\nobject of length 1.  (This contrasts with text strings, where both indexing\nand slicing will produce a string of length 1) The representation of bytes objects uses the literal format (b'...')\nsince it is often more useful than e.g. bytes([46, 46, 46]).  You can\nalways convert a bytes object into a list of integers using list(b). bytearray objects are a mutable counterpart to bytes\nobjects. There is no dedicated literal syntax for bytearray objects, instead\nthey are always created by calling the constructor: Creating an empty instance: bytearray() Creating a zero-filled instance with a given length: bytearray(10) From an iterable of integers: bytearray(range(20)) Copying existing binary data via the buffer protocol:  bytearray(b'Hi!') As bytearray objects are mutable, they support the\nmutable sequence operations in addition to the\ncommon bytes and bytearray operations described in Bytes and Bytearray Operations. Also see the bytearray built-in. Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal\nnumbers are a commonly used format for describing binary data. Accordingly,\nthe bytearray type has an additional class method to read data in that format: This bytearray class method returns bytearray object, decoding\nthe given string object.  The string must contain two hexadecimal digits\nper byte, with ASCII whitespace being ignored. Changed in version 3.7: bytearray.fromhex() now skips all ASCII whitespace in the string,\nnot just spaces. A reverse conversion function exists to transform a bytearray object into its\nhexadecimal representation. Return a string object containing two hexadecimal digits for each\nbyte in the instance. Added in version 3.5. Changed in version 3.8: Similar to bytes.hex(), bytearray.hex() now supports\noptional sep and bytes_per_sep parameters to insert separators\nbetween bytes in the hex output. Since bytearray objects are sequences of integers (akin to a list), for a\nbytearray object b, b[0] will be an integer, while b[0:1] will be\na bytearray object of length 1.  (This contrasts with text strings, where\nboth indexing and slicing will produce a string of length 1) The representation of bytearray objects uses the bytes literal format\n(bytearray(b'...')) since it is often more useful than e.g.\nbytearray([46, 46, 46]).  You can always convert a bytearray object into\na list of integers using list(b). Both bytes and bytearray objects support the common\nsequence operations. They interoperate not just with operands of the same\ntype, but with any bytes-like object. Due to this flexibility, they can be\nfreely mixed in operations without causing errors. However, the return type\nof the result may depend on the order of operands. Note The methods on bytes and bytearray objects don’t accept strings as their\narguments, just as the methods on strings don’t accept bytes as their\narguments.  For example, you have to write: and: Some bytes and bytearray operations assume the use of ASCII compatible\nbinary formats, and hence should be avoided when working with arbitrary\nbinary data. These restrictions are covered below. Note Using these ASCII based operations to manipulate binary data that is not\nstored in an ASCII based format may lead to data corruption. The following methods on bytes and bytearray objects can be used with\narbitrary binary data. Return the number of non-overlapping occurrences of subsequence sub in\nthe range [start, end].  Optional arguments start and end are\ninterpreted as in slice notation. The subsequence to search for may be any bytes-like object or an\ninteger in the range 0 to 255. If sub is empty, returns the number of empty slices between characters\nwhich is the length of the bytes object plus one. Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. If the binary data starts with the prefix string, return\nbytes[len(prefix):]. Otherwise, return a copy of the original\nbinary data: The prefix may be any bytes-like object. Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. Added in version 3.9. If the binary data ends with the suffix string and that suffix is\nnot empty, return bytes[:-len(suffix)].  Otherwise, return a copy of\nthe original binary data: The suffix may be any bytes-like object. Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. Added in version 3.9. Return the bytes decoded to a str. encoding defaults to 'utf-8';\nsee Standard Encodings for possible values. errors controls how decoding errors are handled.\nIf 'strict' (the default), a UnicodeError exception is raised.\nOther possible values are 'ignore', 'replace',\nand any other name registered via codecs.register_error().\nSee Error Handlers for details. For performance reasons, the value of errors is not checked for validity\nunless a decoding error actually occurs,\nPython Development Mode is enabled or a debug build is used. Note Passing the encoding argument to str allows decoding any\nbytes-like object directly, without needing to make a temporary\nbytes or bytearray object. Changed in version 3.1: Added support for keyword arguments. Changed in version 3.9: The value of the errors argument is now checked in Python Development Mode and\nin debug mode. Return True if the binary data ends with the specified suffix,\notherwise return False.  suffix can also be a tuple of suffixes to\nlook for.  With optional start, test beginning at that position.  With\noptional end, stop comparing at that position. The suffix(es) to search for may be any bytes-like object. Return the lowest index in the data where the subsequence sub is found,\nsuch that sub is contained in the slice s[start:end].  Optional\narguments start and end are interpreted as in slice notation.  Return\n-1 if sub is not found. The subsequence to search for may be any bytes-like object or an\ninteger in the range 0 to 255. Note The find() method should be used only if you need to know the\nposition of sub.  To check if sub is a substring or not, use the\nin operator: Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. Like find(), but raise ValueError when the\nsubsequence is not found. The subsequence to search for may be any bytes-like object or an\ninteger in the range 0 to 255. Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. Return a bytes or bytearray object which is the concatenation of the\nbinary data sequences in iterable.  A TypeError will be raised\nif there are any values in iterable that are not bytes-like\nobjects, including str objects.  The\nseparator between elements is the contents of the bytes or\nbytearray object providing this method. This static method returns a translation table usable for\nbytes.translate() that will map each character in from into the\ncharacter at the same position in to; from and to must both be\nbytes-like objects and have the same length. Added in version 3.1. Split the sequence at the first occurrence of sep, and return a 3-tuple\ncontaining the part before the separator, the separator itself or its\nbytearray copy, and the part after the separator.\nIf the separator is not found, return a 3-tuple\ncontaining a copy of the original sequence, followed by two empty bytes or\nbytearray objects. The separator to search for may be any bytes-like object. Return a copy of the sequence with all occurrences of subsequence old\nreplaced by new.  If the optional argument count is given, only the\nfirst count occurrences are replaced. The subsequence to search for and its replacement may be any\nbytes-like object. Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Return the highest index in the sequence where the subsequence sub is\nfound, such that sub is contained within s[start:end].  Optional\narguments start and end are interpreted as in slice notation. Return\n-1 on failure. The subsequence to search for may be any bytes-like object or an\ninteger in the range 0 to 255. Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. Like rfind() but raises ValueError when the\nsubsequence sub is not found. The subsequence to search for may be any bytes-like object or an\ninteger in the range 0 to 255. Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. Split the sequence at the last occurrence of sep, and return a 3-tuple\ncontaining the part before the separator, the separator itself or its\nbytearray copy, and the part after the separator.\nIf the separator is not found, return a 3-tuple\ncontaining two empty bytes or bytearray objects, followed by a copy of the\noriginal sequence. The separator to search for may be any bytes-like object. Return True if the binary data starts with the specified prefix,\notherwise return False.  prefix can also be a tuple of prefixes to\nlook for.  With optional start, test beginning at that position.  With\noptional end, stop comparing at that position. The prefix(es) to search for may be any bytes-like object. Return a copy of the bytes or bytearray object where all bytes occurring in\nthe optional argument delete are removed, and the remaining bytes have\nbeen mapped through the given translation table, which must be a bytes\nobject of length 256. You can use the bytes.maketrans() method to create a translation\ntable. Set the table argument to None for translations that only delete\ncharacters: Changed in version 3.6: delete is now supported as a keyword argument. The following methods on bytes and bytearray objects have default behaviours\nthat assume the use of ASCII compatible binary formats, but can still be used\nwith arbitrary binary data by passing appropriate arguments. Note that all of\nthe bytearray methods in this section do not operate in place, and instead\nproduce new objects. Return a copy of the object centered in a sequence of length width.\nPadding is done using the specified fillbyte (default is an ASCII\nspace). For bytes objects, the original sequence is returned if\nwidth is less than or equal to len(s). Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. Return a copy of the object left justified in a sequence of length width.\nPadding is done using the specified fillbyte (default is an ASCII\nspace). For bytes objects, the original sequence is returned if\nwidth is less than or equal to len(s). Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. Return a copy of the sequence with specified leading bytes removed.  The\nchars argument is a binary sequence specifying the set of byte values to\nbe removed - the name refers to the fact this method is usually used with\nASCII characters.  If omitted or None, the chars argument defaults\nto removing ASCII whitespace.  The chars argument is not a prefix;\nrather, all combinations of its values are stripped: The binary sequence of byte values to remove may be any\nbytes-like object. See removeprefix() for a method\nthat will remove a single prefix string rather than all of a set of\ncharacters.  For example: Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. Return a copy of the object right justified in a sequence of length width.\nPadding is done using the specified fillbyte (default is an ASCII\nspace). For bytes objects, the original sequence is returned if\nwidth is less than or equal to len(s). Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. Split the binary sequence into subsequences of the same type, using sep\nas the delimiter string. If maxsplit is given, at most maxsplit splits\nare done, the rightmost ones.  If sep is not specified or None,\nany subsequence consisting solely of ASCII whitespace is a separator.\nExcept for splitting from the right, rsplit() behaves like\nsplit() which is described in detail below. Return a copy of the sequence with specified trailing bytes removed.  The\nchars argument is a binary sequence specifying the set of byte values to\nbe removed - the name refers to the fact this method is usually used with\nASCII characters.  If omitted or None, the chars argument defaults to\nremoving ASCII whitespace.  The chars argument is not a suffix; rather,\nall combinations of its values are stripped: The binary sequence of byte values to remove may be any\nbytes-like object. See removesuffix() for a method\nthat will remove a single suffix string rather than all of a set of\ncharacters.  For example: Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. Split the binary sequence into subsequences of the same type, using sep\nas the delimiter string. If maxsplit is given and non-negative, at most\nmaxsplit splits are done (thus, the list will have at most maxsplit+1\nelements).  If maxsplit is not specified or is -1, then there is no\nlimit on the number of splits (all possible splits are made). If sep is given, consecutive delimiters are not grouped together and are\ndeemed to delimit empty subsequences (for example, b'1,,2'.split(b',')\nreturns [b'1', b'', b'2']).  The sep argument may consist of a\nmultibyte sequence as a single delimiter. Splitting an empty sequence with\na specified separator returns [b''] or [bytearray(b'')] depending\non the type of object being split.  The sep argument may be any\nbytes-like object. For example: If sep is not specified or is None, a different splitting algorithm\nis applied: runs of consecutive ASCII whitespace are regarded as a single\nseparator, and the result will contain no empty strings at the start or\nend if the sequence has leading or trailing whitespace.  Consequently,\nsplitting an empty sequence or a sequence consisting solely of ASCII\nwhitespace without a specified separator returns []. For example: Return a copy of the sequence with specified leading and trailing bytes\nremoved. The chars argument is a binary sequence specifying the set of\nbyte values to be removed - the name refers to the fact this method is\nusually used with ASCII characters.  If omitted or None, the chars\nargument defaults to removing ASCII whitespace. The chars argument is\nnot a prefix or suffix; rather, all combinations of its values are\nstripped: The binary sequence of byte values to remove may be any\nbytes-like object. Note The bytearray version of this method does not operate in place -\nit always produces a new object, even if no changes were made. The following methods on bytes and bytearray objects assume the use of ASCII\ncompatible binary formats and should not be applied to arbitrary binary data.\nNote that all of the bytearray methods in this section do not operate in\nplace, and instead produce new objects. Return a copy of the sequence with each byte interpreted as an ASCII\ncharacter, and the first byte capitalized and the rest lowercased.\nNon-ASCII byte values are passed through unchanged. Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Return a copy of the sequence where all ASCII tab characters are replaced\nby one or more ASCII spaces, depending on the current column and the given\ntab size.  Tab positions occur every tabsize bytes (default is 8,\ngiving tab positions at columns 0, 8, 16 and so on).  To expand the\nsequence, the current column is set to zero and the sequence is examined\nbyte by byte.  If the byte is an ASCII tab character (b'\\t'), one or\nmore space characters are inserted in the result until the current column\nis equal to the next tab position. (The tab character itself is not\ncopied.)  If the current byte is an ASCII newline (b'\\n') or\ncarriage return (b'\\r'), it is copied and the current column is reset\nto zero.  Any other byte value is copied unchanged and the current column\nis incremented by one regardless of how the byte value is represented when\nprinted: Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Return True if all bytes in the sequence are alphabetical ASCII characters\nor ASCII decimal digits and the sequence is not empty, False otherwise.\nAlphabetic ASCII characters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'. ASCII decimal\ndigits are those byte values in the sequence b'0123456789'. For example: Return True if all bytes in the sequence are alphabetic ASCII characters\nand the sequence is not empty, False otherwise.  Alphabetic ASCII\ncharacters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'. For example: Return True if the sequence is empty or all bytes in the sequence are ASCII,\nFalse otherwise.\nASCII bytes are in the range 0-0x7F. Added in version 3.7. Return True if all bytes in the sequence are ASCII decimal digits\nand the sequence is not empty, False otherwise. ASCII decimal digits are\nthose byte values in the sequence b'0123456789'. For example: Return True if there is at least one lowercase ASCII character\nin the sequence and no uppercase ASCII characters, False otherwise. For example: Lowercase ASCII characters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyz'. Uppercase ASCII characters\nare those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. Return True if all bytes in the sequence are ASCII whitespace and the\nsequence is not empty, False otherwise.  ASCII whitespace characters are\nthose byte values in the sequence b' \\t\\n\\r\\x0b\\f' (space, tab, newline,\ncarriage return, vertical tab, form feed). Return True if the sequence is ASCII titlecase and the sequence is not\nempty, False otherwise. See bytes.title() for more details on the\ndefinition of “titlecase”. For example: Return True if there is at least one uppercase alphabetic ASCII character\nin the sequence and no lowercase ASCII characters, False otherwise. For example: Lowercase ASCII characters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyz'. Uppercase ASCII characters\nare those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. Return a copy of the sequence with all the uppercase ASCII characters\nconverted to their corresponding lowercase counterpart. For example: Lowercase ASCII characters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyz'. Uppercase ASCII characters\nare those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Return a list of the lines in the binary sequence, breaking at ASCII\nline boundaries. This method uses the universal newlines approach\nto splitting lines. Line breaks are not included in the resulting list\nunless keepends is given and true. For example: Unlike split() when a delimiter string sep is given, this\nmethod returns an empty list for the empty string, and a terminal line\nbreak does not result in an extra line: Return a copy of the sequence with all the lowercase ASCII characters\nconverted to their corresponding uppercase counterpart and vice-versa. For example: Lowercase ASCII characters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyz'. Uppercase ASCII characters\nare those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. Unlike str.swapcase(), it is always the case that\nbin.swapcase().swapcase() == bin for the binary versions. Case\nconversions are symmetrical in ASCII, even though that is not generally\ntrue for arbitrary Unicode code points. Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Return a titlecased version of the binary sequence where words start with\nan uppercase ASCII character and the remaining characters are lowercase.\nUncased byte values are left unmodified. For example: Lowercase ASCII characters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyz'. Uppercase ASCII characters\nare those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\nAll other byte values are uncased. The algorithm uses a simple language-independent definition of a word as\ngroups of consecutive letters.  The definition works in many contexts but\nit means that apostrophes in contractions and possessives form word\nboundaries, which may not be the desired result: A workaround for apostrophes can be constructed using regular expressions: Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Return a copy of the sequence with all the lowercase ASCII characters\nconverted to their corresponding uppercase counterpart. For example: Lowercase ASCII characters are those byte values in the sequence\nb'abcdefghijklmnopqrstuvwxyz'. Uppercase ASCII characters\nare those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Return a copy of the sequence left filled with ASCII b'0' digits to\nmake a sequence of length width. A leading sign prefix (b'+'/\nb'-') is handled by inserting the padding after the sign character\nrather than before. For bytes objects, the original sequence is\nreturned if width is less than or equal to len(seq). For example: Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. Note The formatting operations described here exhibit a variety of quirks that\nlead to a number of common errors (such as failing to display tuples and\ndictionaries correctly).  If the value being printed may be a tuple or\ndictionary, wrap it in a tuple. Bytes objects (bytes/bytearray) have one unique built-in operation:\nthe % operator (modulo).\nThis is also known as the bytes formatting or interpolation operator.\nGiven format % values (where format is a bytes object), % conversion\nspecifications in format are replaced with zero or more elements of values.\nThe effect is similar to using the sprintf() in the C language. If format requires a single argument, values may be a single non-tuple\nobject. [5]  Otherwise, values must be a tuple with exactly the number of\nitems specified by the format bytes object, or a single mapping object (for\nexample, a dictionary). A conversion specifier contains two or more characters and has the following\ncomponents, which must occur in this order: The '%' character, which marks the start of the specifier. Mapping key (optional), consisting of a parenthesised sequence of characters\n(for example, (somename)). Conversion flags (optional), which affect the result of some conversion\ntypes. Minimum field width (optional).  If specified as an '*' (asterisk), the\nactual width is read from the next element of the tuple in values, and the\nobject to convert comes after the minimum field width and optional precision. Precision (optional), given as a '.' (dot) followed by the precision.  If\nspecified as '*' (an asterisk), the actual precision is read from the next\nelement of the tuple in values, and the value to convert comes after the\nprecision. Length modifier (optional). Conversion type. When the right argument is a dictionary (or other mapping type), then the\nformats in the bytes object must include a parenthesised mapping key into that\ndictionary inserted immediately after the '%' character. The mapping key\nselects the value to be formatted from the mapping.  For example: In this case no * specifiers may occur in a format (since they require a\nsequential parameter list). The conversion flag characters are: Flag Meaning '#' The value conversion will use the “alternate form” (where defined\nbelow). '0' The conversion will be zero padded for numeric values. '-' The converted value is left adjusted (overrides the '0'\nconversion if both are given). ' ' (a space) A blank should be left before a positive number (or empty\nstring) produced by a signed conversion. '+' A sign character ('+' or '-') will precede the conversion\n(overrides a “space” flag). A length modifier (h, l, or L) may be present, but is ignored as it\nis not necessary for Python – so e.g. %ld is identical to %d. The conversion types are: Conversion Meaning Notes 'd' Signed integer decimal. 'i' Signed integer decimal. 'o' Signed octal value. (1) 'u' Obsolete type – it is identical to 'd'. (8) 'x' Signed hexadecimal (lowercase). (2) 'X' Signed hexadecimal (uppercase). (2) 'e' Floating-point exponential format (lowercase). (3) 'E' Floating-point exponential format (uppercase). (3) 'f' Floating-point decimal format. (3) 'F' Floating-point decimal format. (3) 'g' Floating-point format. Uses lowercase exponential\nformat if exponent is less than -4 or not less than\nprecision, decimal format otherwise. (4) 'G' Floating-point format. Uses uppercase exponential\nformat if exponent is less than -4 or not less than\nprecision, decimal format otherwise. (4) 'c' Single byte (accepts integer or single\nbyte objects). 'b' Bytes (any object that follows the\nbuffer protocol or has\n__bytes__()). (5) 's' 's' is an alias for 'b' and should only\nbe used for Python2/3 code bases. (6) 'a' Bytes (converts any Python object using\nrepr(obj).encode('ascii', 'backslashreplace')). (5) 'r' 'r' is an alias for 'a' and should only\nbe used for Python2/3 code bases. (7) '%' No argument is converted, results in a '%'\ncharacter in the result. Notes: The alternate form causes a leading octal specifier ('0o') to be\ninserted before the first digit. The alternate form causes a leading '0x' or '0X' (depending on whether\nthe 'x' or 'X' format was used) to be inserted before the first digit. The alternate form causes the result to always contain a decimal point, even if\nno digits follow it. The precision determines the number of digits after the decimal point and\ndefaults to 6. The alternate form causes the result to always contain a decimal point, and\ntrailing zeroes are not removed as they would otherwise be. The precision determines the number of significant digits before and after the\ndecimal point and defaults to 6. If precision is N, the output is truncated to N characters. b'%s' is deprecated, but will not be removed during the 3.x series. b'%r' is deprecated, but will not be removed during the 3.x series. See PEP 237. Note The bytearray version of this method does not operate in place - it\nalways produces a new object, even if no changes were made. See also PEP 461 - Adding % formatting to bytes and bytearray Added in version 3.5. memoryview objects allow Python code to access the internal data\nof an object that supports the buffer protocol without\ncopying. Create a memoryview that references object.  object must\nsupport the buffer protocol.  Built-in objects that support the buffer\nprotocol include bytes and bytearray. A memoryview has the notion of an element, which is the\natomic memory unit handled by the originating object.  For many simple\ntypes such as bytes and bytearray, an element is a single\nbyte, but other types such as array.array may have bigger elements. len(view) is equal to the length of tolist, which\nis the nested list representation of the view. If view.ndim = 1,\nthis is equal to the number of elements in the view. Changed in version 3.12: If view.ndim == 0, len(view) now raises TypeError instead of returning 1. The itemsize attribute will give you the number of\nbytes in a single element. A memoryview supports slicing and indexing to expose its data.\nOne-dimensional slicing will result in a subview: If format is one of the native format specifiers\nfrom the struct module, indexing with an integer or a tuple of\nintegers is also supported and returns a single element with\nthe correct type.  One-dimensional memoryviews can be indexed\nwith an integer or a one-integer tuple.  Multi-dimensional memoryviews\ncan be indexed with tuples of exactly ndim integers where ndim is\nthe number of dimensions.  Zero-dimensional memoryviews can be indexed\nwith the empty tuple. Here is an example with a non-byte format: If the underlying object is writable, the memoryview supports\none-dimensional slice assignment. Resizing is not allowed: One-dimensional memoryviews of hashable (read-only) types with formats\n‘B’, ‘b’ or ‘c’ are also hashable. The hash is defined as\nhash(m) == hash(m.tobytes()): Changed in version 3.3: One-dimensional memoryviews can now be sliced.\nOne-dimensional memoryviews with formats ‘B’, ‘b’ or ‘c’ are now hashable. Changed in version 3.4: memoryview is now registered automatically with\ncollections.abc.Sequence Changed in version 3.5: memoryviews can now be indexed with tuple of integers. memoryview has several methods: A memoryview and a PEP 3118 exporter are equal if their shapes are\nequivalent and if all corresponding values are equal when the operands’\nrespective format codes are interpreted using struct syntax. For the subset of struct format strings currently supported by\ntolist(), v and w are equal if v.tolist() == w.tolist(): If either format string is not supported by the struct module,\nthen the objects will always compare as unequal (even if the format\nstrings and buffer contents are identical): Note that, as with floating-point numbers, v is w does not imply\nv == w for memoryview objects. Changed in version 3.3: Previous versions compared the raw memory disregarding the item format\nand the logical array structure. Return the data in the buffer as a bytestring.  This is equivalent to\ncalling the bytes constructor on the memoryview. For non-contiguous arrays the result is equal to the flattened list\nrepresentation with all elements converted to bytes. tobytes()\nsupports all format strings, including those that are not in\nstruct module syntax. Added in version 3.8: order can be {‘C’, ‘F’, ‘A’}.  When order is ‘C’ or ‘F’, the data\nof the original array is converted to C or Fortran order. For contiguous\nviews, ‘A’ returns an exact copy of the physical memory. In particular,\nin-memory Fortran order is preserved. For non-contiguous views, the\ndata is converted to C first. order=None is the same as order=’C’. Return a string object containing two hexadecimal digits for each\nbyte in the buffer. Added in version 3.5. Changed in version 3.8: Similar to bytes.hex(), memoryview.hex() now supports\noptional sep and bytes_per_sep parameters to insert separators\nbetween bytes in the hex output. Return the data in the buffer as a list of elements. Changed in version 3.3: tolist() now supports all single character native formats in\nstruct module syntax as well as multi-dimensional\nrepresentations. Return a readonly version of the memoryview object.  The original\nmemoryview object is unchanged. Added in version 3.8. Release the underlying buffer exposed by the memoryview object.  Many\nobjects take special actions when a view is held on them (for example,\na bytearray would temporarily forbid resizing); therefore,\ncalling release() is handy to remove these restrictions (and free any\ndangling resources) as soon as possible. After this method has been called, any further operation on the view\nraises a ValueError (except release() itself which can\nbe called multiple times): The context management protocol can be used for a similar effect,\nusing the with statement: Added in version 3.2. Cast a memoryview to a new format or shape. shape defaults to\n[byte_length//new_itemsize], which means that the result view\nwill be one-dimensional. The return value is a new memoryview, but\nthe buffer itself is not copied. Supported casts are 1D -> C-contiguous\nand C-contiguous -> 1D. The destination format is restricted to a single element native format in\nstruct syntax. One of the formats must be a byte format\n(‘B’, ‘b’ or ‘c’). The byte length of the result must be the same\nas the original length.\nNote that all byte lengths may depend on the operating system. Cast 1D/long to 1D/unsigned bytes: Cast 1D/unsigned bytes to 1D/char: Cast 1D/bytes to 3D/ints to 1D/signed char: Cast 1D/unsigned long to 2D/unsigned long: Added in version 3.3. Changed in version 3.5: The source format is no longer restricted when casting to a byte view. There are also several readonly attributes available: The underlying object of the memoryview: Added in version 3.3. nbytes == product(shape) * itemsize == len(m.tobytes()). This is\nthe amount of space in bytes that the array would use in a contiguous\nrepresentation. It is not necessarily equal to len(m): Multi-dimensional arrays: Added in version 3.3. A bool indicating whether the memory is read only. A string containing the format (in struct module style) for each\nelement in the view. A memoryview can be created from exporters with\narbitrary format strings, but some methods (e.g. tolist()) are\nrestricted to native single element formats. Changed in version 3.3: format 'B' is now handled according to the struct module syntax.\nThis means that memoryview(b'abc')[0] == b'abc'[0] == 97. The size in bytes of each element of the memoryview: An integer indicating how many dimensions of a multi-dimensional array the\nmemory represents. A tuple of integers the length of ndim giving the shape of the\nmemory as an N-dimensional array. Changed in version 3.3: An empty tuple instead of None when ndim = 0. A tuple of integers the length of ndim giving the size in bytes to\naccess each element for each dimension of the array. Changed in version 3.3: An empty tuple instead of None when ndim = 0. Used internally for PIL-style arrays. The value is informational only. A bool indicating whether the memory is C-contiguous. Added in version 3.3. A bool indicating whether the memory is Fortran contiguous. Added in version 3.3. A bool indicating whether the memory is contiguous. Added in version 3.3. A set object is an unordered collection of distinct hashable objects.\nCommon uses include membership testing, removing duplicates from a sequence, and\ncomputing mathematical operations such as intersection, union, difference, and\nsymmetric difference.\n(For other containers see the built-in dict, list,\nand tuple classes, and the collections module.) Like other collections, sets support x in set, len(set), and for x in\nset.  Being an unordered collection, sets do not record element position or\norder of insertion.  Accordingly, sets do not support indexing, slicing, or\nother sequence-like behavior. There are currently two built-in set types, set and frozenset.\nThe set type is mutable — the contents can be changed using methods\nlike add() and remove().  Since it is mutable, it has no\nhash value and cannot be used as either a dictionary key or as an element of\nanother set.  The frozenset type is immutable and hashable —\nits contents cannot be altered after it is created; it can therefore be used as\na dictionary key or as an element of another set. Non-empty sets (not frozensets) can be created by placing a comma-separated list\nof elements within braces, for example: {'jack', 'sjoerd'}, in addition to the\nset constructor. The constructors for both classes work the same: Return a new set or frozenset object whose elements are taken from\niterable.  The elements of a set must be hashable.  To\nrepresent sets of sets, the inner sets must be frozenset\nobjects.  If iterable is not specified, a new empty set is\nreturned. Sets can be created by several means: Use a comma-separated list of elements within braces: {'jack', 'sjoerd'} Use a set comprehension: {c for c in 'abracadabra' if c not in 'abc'} Use the type constructor: set(), set('foobar'), set(['a', 'b', 'foo']) Instances of set and frozenset provide the following\noperations: Return the number of elements in set s (cardinality of s). Test x for membership in s. Test x for non-membership in s. Return True if the set has no elements in common with other.  Sets are\ndisjoint if and only if their intersection is the empty set. Test whether every element in the set is in other. Test whether the set is a proper subset of other, that is,\nset <= other and set != other. Test whether every element in other is in the set. Test whether the set is a proper superset of other, that is, set >=\nother and set != other. Return a new set with elements from the set and all others. Return a new set with elements common to the set and all others. Return a new set with elements in the set that are not in the others. Return a new set with elements in either the set or other but not both. Return a shallow copy of the set. Note, the non-operator versions of union(), intersection(),\ndifference(), symmetric_difference(), issubset(), and\nissuperset() methods will accept any iterable as an argument.  In\ncontrast, their operator based counterparts require their arguments to be\nsets.  This precludes error-prone constructions like set('abc') & 'cbs'\nin favor of the more readable set('abc').intersection('cbs'). Both set and frozenset support set to set comparisons. Two\nsets are equal if and only if every element of each set is contained in the\nother (each is a subset of the other). A set is less than another set if and\nonly if the first set is a proper subset of the second set (is a subset, but\nis not equal). A set is greater than another set if and only if the first set\nis a proper superset of the second set (is a superset, but is not equal). Instances of set are compared to instances of frozenset\nbased on their members.  For example, set('abc') == frozenset('abc')\nreturns True and so does set('abc') in set([frozenset('abc')]). The subset and equality comparisons do not generalize to a total ordering\nfunction.  For example, any two nonempty disjoint sets are not equal and are not\nsubsets of each other, so all of the following return False: a<b,\na==b, or a>b. Since sets only define partial ordering (subset relationships), the output of\nthe list.sort() method is undefined for lists of sets. Set elements, like dictionary keys, must be hashable. Binary operations that mix set instances with frozenset\nreturn the type of the first operand.  For example: frozenset('ab') |\nset('bc') returns an instance of frozenset. The following table lists operations available for set that do not\napply to immutable instances of frozenset: Update the set, adding elements from all others. Update the set, keeping only elements found in it and all others. Update the set, removing elements found in others. Update the set, keeping only elements found in either set, but not in both. Add element elem to the set. Remove element elem from the set.  Raises KeyError if elem is\nnot contained in the set. Remove element elem from the set if it is present. Remove and return an arbitrary element from the set.  Raises\nKeyError if the set is empty. Remove all elements from the set. Note, the non-operator versions of the update(),\nintersection_update(), difference_update(), and\nsymmetric_difference_update() methods will accept any iterable as an\nargument. Note, the elem argument to the __contains__(),\nremove(), and\ndiscard() methods may be a set.  To support searching for an equivalent\nfrozenset, a temporary one is created from elem. A mapping object maps hashable values to arbitrary objects.\nMappings are mutable objects.  There is currently only one standard mapping\ntype, the dictionary.  (For other containers see the built-in\nlist, set, and tuple classes, and the\ncollections module.) A dictionary’s keys are almost arbitrary values.  Values that are not\nhashable, that is, values containing lists, dictionaries or other\nmutable types (that are compared by value rather than by object identity) may\nnot be used as keys.\nValues that compare equal (such as 1, 1.0, and True)\ncan be used interchangeably to index the same dictionary entry. Return a new dictionary initialized from an optional positional argument\nand a possibly empty set of keyword arguments. Dictionaries can be created by several means: Use a comma-separated list of key: value pairs within braces:\n{'jack': 4098, 'sjoerd': 4127} or {4098: 'jack', 4127: 'sjoerd'} Use a dict comprehension: {}, {x: x ** 2 for x in range(10)} Use the type constructor: dict(),\ndict([('foo', 100), ('bar', 200)]), dict(foo=100, bar=200) If no positional argument is given, an empty dictionary is created.\nIf a positional argument is given and it is a mapping object, a dictionary\nis created with the same key-value pairs as the mapping object.  Otherwise,\nthe positional argument must be an iterable object.  Each item in\nthe iterable must itself be an iterable with exactly two objects.  The\nfirst object of each item becomes a key in the new dictionary, and the\nsecond object the corresponding value.  If a key occurs more than once, the\nlast value for that key becomes the corresponding value in the new\ndictionary. If keyword arguments are given, the keyword arguments and their values are\nadded to the dictionary created from the positional argument.  If a key\nbeing added is already present, the value from the keyword argument\nreplaces the value from the positional argument. To illustrate, the following examples all return a dictionary equal to\n{\"one\": 1, \"two\": 2, \"three\": 3}: Providing keyword arguments as in the first example only works for keys that\nare valid Python identifiers.  Otherwise, any valid keys can be used. These are the operations that dictionaries support (and therefore, custom\nmapping types should support too): Return a list of all the keys used in the dictionary d. Return the number of items in the dictionary d. Return the item of d with key key.  Raises a KeyError if key is\nnot in the map. If a subclass of dict defines a method __missing__() and key\nis not present, the d[key] operation calls that method with the key key\nas argument.  The d[key] operation then returns or raises whatever is\nreturned or raised by the __missing__(key) call.\nNo other operations or methods invoke __missing__(). If\n__missing__() is not defined, KeyError is raised.\n__missing__() must be a method; it cannot be an instance variable: The example above shows part of the implementation of\ncollections.Counter.  A different __missing__ method is used\nby collections.defaultdict. Set d[key] to value. Remove d[key] from d.  Raises a KeyError if key is not in the\nmap. Return True if d has a key key, else False. Equivalent to not key in d. Return an iterator over the keys of the dictionary.  This is a shortcut\nfor iter(d.keys()). Remove all items from the dictionary. Return a shallow copy of the dictionary. Create a new dictionary with keys from iterable and values set to value. fromkeys() is a class method that returns a new dictionary. value\ndefaults to None.  All of the values refer to just a single instance,\nso it generally doesn’t make sense for value to be a mutable object\nsuch as an empty list.  To get distinct values, use a dict\ncomprehension instead. Return the value for key if key is in the dictionary, else default.\nIf default is not given, it defaults to None, so that this method\nnever raises a KeyError. Return a new view of the dictionary’s items ((key, value) pairs).\nSee the documentation of view objects. Return a new view of the dictionary’s keys.  See the documentation\nof view objects. If key is in the dictionary, remove it and return its value, else return\ndefault.  If default is not given and key is not in the dictionary,\na KeyError is raised. Remove and return a (key, value) pair from the dictionary.\nPairs are returned in LIFO order. popitem() is useful to destructively iterate over a dictionary, as\noften used in set algorithms.  If the dictionary is empty, calling\npopitem() raises a KeyError. Changed in version 3.7: LIFO order is now guaranteed. In prior versions, popitem() would\nreturn an arbitrary key/value pair. Return a reverse iterator over the keys of the dictionary. This is a\nshortcut for reversed(d.keys()). Added in version 3.8. If key is in the dictionary, return its value.  If not, insert key\nwith a value of default and return default.  default defaults to\nNone. Update the dictionary with the key/value pairs from other, overwriting\nexisting keys.  Return None. update() accepts either another dictionary object or an iterable of\nkey/value pairs (as tuples or other iterables of length two).  If keyword\narguments are specified, the dictionary is then updated with those\nkey/value pairs: d.update(red=1, blue=2). Return a new view of the dictionary’s values.  See the\ndocumentation of view objects. An equality comparison between one dict.values() view and another\nwill always return False. This also applies when comparing\ndict.values() to itself: Create a new dictionary with the merged keys and values of d and\nother, which must both be dictionaries. The values of other take\npriority when d and other share keys. Added in version 3.9. Update the dictionary d with keys and values from other, which may be\neither a mapping or an iterable of key/value pairs. The\nvalues of other take priority when d and other share keys. Added in version 3.9. Dictionaries compare equal if and only if they have the same (key,\nvalue) pairs (regardless of ordering). Order comparisons (‘<’, ‘<=’, ‘>=’, ‘>’) raise\nTypeError. Dictionaries preserve insertion order.  Note that updating a key does not\naffect the order.  Keys added after deletion are inserted at the end. Changed in version 3.7: Dictionary order is guaranteed to be insertion order.  This behavior was\nan implementation detail of CPython from 3.6. Dictionaries and dictionary views are reversible. Changed in version 3.8: Dictionaries are now reversible. See also types.MappingProxyType can be used to create a read-only view\nof a dict. The objects returned by dict.keys(), dict.values() and\ndict.items() are view objects.  They provide a dynamic view on the\ndictionary’s entries, which means that when the dictionary changes, the view\nreflects these changes. Dictionary views can be iterated over to yield their respective data, and\nsupport membership tests: Return the number of entries in the dictionary. Return an iterator over the keys, values or items (represented as tuples of\n(key, value)) in the dictionary. Keys and values are iterated over in insertion order.\nThis allows the creation of (value, key) pairs\nusing zip(): pairs = zip(d.values(), d.keys()).  Another way to\ncreate the same list is pairs = [(v, k) for (k, v) in d.items()]. Iterating views while adding or deleting entries in the dictionary may raise\na RuntimeError or fail to iterate over all entries. Changed in version 3.7: Dictionary order is guaranteed to be insertion order. Return True if x is in the underlying dictionary’s keys, values or\nitems (in the latter case, x should be a (key, value) tuple). Return a reverse iterator over the keys, values or items of the dictionary.\nThe view will be iterated in reverse order of the insertion. Changed in version 3.8: Dictionary views are now reversible. Return a types.MappingProxyType that wraps the original\ndictionary to which the view refers. Added in version 3.10. Keys views are set-like since their entries are unique and hashable.\nItems views also have set-like operations since the (key, value) pairs\nare unique and the keys are hashable.\nIf all values in an items view are hashable as well,\nthen the items view can interoperate with other sets.\n(Values views are not treated as set-like\nsince the entries are generally not unique.)  For set-like views, all of the\noperations defined for the abstract base class collections.abc.Set are\navailable (for example, ==, <, or ^).  While using set operators,\nset-like views accept any iterable as the other operand,\nunlike sets which only accept sets as the input. An example of dictionary view usage: Python’s with statement supports the concept of a runtime context\ndefined by a context manager.  This is implemented using a pair of methods\nthat allow user-defined classes to define a runtime context that is entered\nbefore the statement body is executed and exited when the statement ends: Enter the runtime context and return either this object or another object\nrelated to the runtime context. The value returned by this method is bound to\nthe identifier in the as clause of with statements using\nthis context manager. An example of a context manager that returns itself is a file object.\nFile objects return themselves from __enter__() to allow open() to be\nused as the context expression in a with statement. An example of a context manager that returns a related object is the one\nreturned by decimal.localcontext(). These managers set the active\ndecimal context to a copy of the original decimal context and then return the\ncopy. This allows changes to be made to the current decimal context in the body\nof the with statement without affecting code outside the\nwith statement. Exit the runtime context and return a Boolean flag indicating if any exception\nthat occurred should be suppressed. If an exception occurred while executing the\nbody of the with statement, the arguments contain the exception type,\nvalue and traceback information. Otherwise, all three arguments are None. Returning a true value from this method will cause the with statement\nto suppress the exception and continue execution with the statement immediately\nfollowing the with statement. Otherwise the exception continues\npropagating after this method has finished executing. Exceptions that occur\nduring execution of this method will replace any exception that occurred in the\nbody of the with statement. The exception passed in should never be reraised explicitly - instead, this\nmethod should return a false value to indicate that the method completed\nsuccessfully and does not want to suppress the raised exception. This allows\ncontext management code to easily detect whether or not an __exit__()\nmethod has actually failed. Python defines several context managers to support easy thread synchronisation,\nprompt closure of files or other objects, and simpler manipulation of the active\ndecimal arithmetic context. The specific types are not treated specially beyond\ntheir implementation of the context management protocol. See the\ncontextlib module for some examples. Python’s generators and the contextlib.contextmanager decorator\nprovide a convenient way to implement these protocols.  If a generator function is\ndecorated with the contextlib.contextmanager decorator, it will return a\ncontext manager implementing the necessary __enter__() and\n__exit__() methods, rather than the iterator produced by an\nundecorated generator function. Note that there is no specific slot for any of these methods in the type\nstructure for Python objects in the Python/C API. Extension types wanting to\ndefine these methods must provide them as a normal Python accessible method.\nCompared to the overhead of setting up the runtime context, the overhead of a\nsingle class dictionary lookup is negligible. The core built-in types for type annotations are\nGeneric Alias and Union. GenericAlias objects are generally created by\nsubscripting a class. They are most often used with\ncontainer classes, such as list or\ndict. For example, list[int] is a GenericAlias object created\nby subscripting the list class with the argument int.\nGenericAlias objects are intended primarily for use with\ntype annotations. Note It is generally only possible to subscript a class if the class implements\nthe special method __class_getitem__(). A GenericAlias object acts as a proxy for a generic type,\nimplementing parameterized generics. For a container class, the\nargument(s) supplied to a subscription of the class may\nindicate the type(s) of the elements an object contains. For example,\nset[bytes] can be used in type annotations to signify a set in\nwhich all the elements are of type bytes. For a class which defines __class_getitem__() but is not a\ncontainer, the argument(s) supplied to a subscription of the class will often\nindicate the return type(s) of one or more methods defined on an object. For\nexample, regular expressions can be used on both the str data\ntype and the bytes data type: If x = re.search('foo', 'foo'), x will be a\nre.Match object where the return values of\nx.group(0) and x[0] will both be of type str. We can\nrepresent this kind of object in type annotations with the GenericAlias\nre.Match[str]. If y = re.search(b'bar', b'bar'), (note the b for bytes),\ny will also be an instance of re.Match, but the return\nvalues of y.group(0) and y[0] will both be of type\nbytes. In type annotations, we would represent this\nvariety of re.Match objects with re.Match[bytes]. GenericAlias objects are instances of the class\ntypes.GenericAlias, which can also be used to create GenericAlias\nobjects directly. Creates a GenericAlias representing a type T parameterized by types\nX, Y, and more depending on the T used.\nFor example, a function expecting a list containing\nfloat elements: Another example for mapping objects, using a dict, which\nis a generic type expecting two type parameters representing the key type\nand the value type.  In this example, the function expects a dict with\nkeys of type str and values of type int: The builtin functions isinstance() and issubclass() do not accept\nGenericAlias types for their second argument: The Python runtime does not enforce type annotations.\nThis extends to generic types and their type parameters. When creating\na container object from a GenericAlias, the elements in the container are not checked\nagainst their type. For example, the following code is discouraged, but will\nrun without errors: Furthermore, parameterized generics erase type parameters during object\ncreation: Calling repr() or str() on a generic shows the parameterized type: The __getitem__() method of generic containers will raise an\nexception to disallow mistakes like dict[str][str]: However, such expressions are valid when type variables are\nused.  The index must have as many elements as there are type variable items\nin the GenericAlias object’s __args__. The following standard library classes support parameterized generics. This\nlist is non-exhaustive. tuple list dict set frozenset type collections.deque collections.defaultdict collections.OrderedDict collections.Counter collections.ChainMap collections.abc.Awaitable collections.abc.Coroutine collections.abc.AsyncIterable collections.abc.AsyncIterator collections.abc.AsyncGenerator collections.abc.Iterable collections.abc.Iterator collections.abc.Generator collections.abc.Reversible collections.abc.Container collections.abc.Collection collections.abc.Callable collections.abc.Set collections.abc.MutableSet collections.abc.Mapping collections.abc.MutableMapping collections.abc.Sequence collections.abc.MutableSequence collections.abc.ByteString collections.abc.MappingView collections.abc.KeysView collections.abc.ItemsView collections.abc.ValuesView contextlib.AbstractContextManager contextlib.AbstractAsyncContextManager dataclasses.Field functools.cached_property functools.partialmethod os.PathLike queue.LifoQueue queue.Queue queue.PriorityQueue queue.SimpleQueue re.Pattern re.Match shelve.BsdDbShelf shelve.DbfilenameShelf shelve.Shelf types.MappingProxyType weakref.WeakKeyDictionary weakref.WeakMethod weakref.WeakSet weakref.WeakValueDictionary All parameterized generics implement special read-only attributes. This attribute points at the non-parameterized generic class: This attribute is a tuple (possibly of length 1) of generic\ntypes passed to the original __class_getitem__() of the\ngeneric class: This attribute is a lazily computed tuple (possibly empty) of unique type\nvariables found in __args__: Note A GenericAlias object with typing.ParamSpec parameters may not\nhave correct __parameters__ after substitution because\ntyping.ParamSpec is intended primarily for static type checking. A boolean that is true if the alias has been unpacked using the\n* operator (see TypeVarTuple). Added in version 3.11. See also Introducing Python’s framework for type annotations. Introducing the ability to natively parameterize standard-library\nclasses, provided they implement the special class method\n__class_getitem__(). Documentation on how to implement generic classes that can be\nparameterized at runtime and understood by static type-checkers. Added in version 3.9. A union object holds the value of the | (bitwise or) operation on\nmultiple type objects.  These types are intended\nprimarily for type annotations. The union type expression\nenables cleaner type hinting syntax compared to typing.Union. Defines a union object which holds types X, Y, and so forth. X | Y\nmeans either X or Y.  It is equivalent to typing.Union[X, Y].\nFor example, the following function expects an argument of type\nint or float: Note The | operand cannot be used at runtime to define unions where one or\nmore members is a forward reference. For example, int | \"Foo\", where\n\"Foo\" is a reference to a class not yet defined, will fail at\nruntime. For unions which include forward references, present the\nwhole expression as a string, e.g. \"int | Foo\". Union objects can be tested for equality with other union objects.  Details: Unions of unions are flattened: Redundant types are removed: When comparing unions, the order is ignored: It is compatible with typing.Union: Optional types can be spelled as a union with None: Calls to isinstance() and issubclass() are also supported with a\nunion object: However, parameterized generics in\nunion objects cannot be checked: The user-exposed type for the union object can be accessed from\ntypes.UnionType and used for isinstance() checks.  An object cannot be\ninstantiated from the type: Note The __or__() method for type objects was added to support the syntax\nX | Y.  If a metaclass implements __or__(), the Union may\noverride it: See also PEP 604 – PEP proposing the X | Y syntax and the Union type. Added in version 3.10. The interpreter supports several other kinds of objects. Most of these support\nonly one or two operations. The only special operation on a module is attribute access: m.name, where\nm is a module and name accesses a name defined in m’s symbol table.\nModule attributes can be assigned to.  (Note that the import\nstatement is not, strictly speaking, an operation on a module object; import\nfoo does not require a module object named foo to exist, rather it requires\nan (external) definition for a module named foo somewhere.) A special attribute of every module is __dict__. This is the\ndictionary containing the module’s symbol table. Modifying this dictionary will\nactually change the module’s symbol table, but direct assignment to the\n__dict__ attribute is not possible (you can write\nm.__dict__['a'] = 1, which defines m.a to be 1, but you can’t write\nm.__dict__ = {}).  Modifying __dict__ directly is\nnot recommended. Modules built into the interpreter are written like this: <module 'sys'\n(built-in)>.  If loaded from a file, they are written as <module 'os' from\n'/usr/local/lib/pythonX.Y/os.pyc'>. See Objects, values and types and Class definitions for these. Function objects are created by function definitions.  The only operation on a\nfunction object is to call it: func(argument-list). There are really two flavors of function objects: built-in functions and\nuser-defined functions.  Both support the same operation (to call the function),\nbut the implementation is different, hence the different object types. See Function definitions for more information. Methods are functions that are called using the attribute notation. There are\ntwo flavors: built-in methods (such as append()\non lists) and class instance method.\nBuilt-in methods are described with the types that support them. If you access a method (a function defined in a class namespace) through an\ninstance, you get a special object: a bound method (also called\ninstance method) object. When called, it will add\nthe self argument\nto the argument list.  Bound methods have two special read-only attributes:\nm.__self__ is the object on which the method\noperates, and m.__func__ is\nthe function implementing the method.  Calling m(arg-1, arg-2, ..., arg-n)\nis completely equivalent to calling m.__func__(m.__self__, arg-1, arg-2, ...,\narg-n). Like function objects, bound method objects support\ngetting arbitrary\nattributes.  However, since method attributes are actually stored on the\nunderlying function object (method.__func__), setting method attributes on\nbound methods is disallowed.  Attempting to set an attribute on a method\nresults in an AttributeError being raised.  In order to set a method\nattribute, you need to explicitly set it on the underlying function object: See Instance methods for more information. Code objects are used by the implementation to represent “pseudo-compiled”\nexecutable Python code such as a function body. They differ from function\nobjects because they don’t contain a reference to their global execution\nenvironment.  Code objects are returned by the built-in compile() function\nand can be extracted from function objects through their\n__code__ attribute. See also the code module. Accessing __code__ raises an auditing event\nobject.__getattr__ with arguments obj and \"__code__\". A code object can be executed or evaluated by passing it (instead of a source\nstring) to the exec() or eval()  built-in functions. See The standard type hierarchy for more information. Type objects represent the various object types.  An object’s type is accessed\nby the built-in function type().  There are no special operations on\ntypes.  The standard module types defines names for all standard built-in\ntypes. Types are written like this: <class 'int'>. This object is returned by functions that don’t explicitly return a value.  It\nsupports no special operations.  There is exactly one null object, named\nNone (a built-in name).  type(None)() produces the same singleton. It is written as None. This object is commonly used by slicing (see Slicings).  It supports no\nspecial operations.  There is exactly one ellipsis object, named\nEllipsis (a built-in name).  type(Ellipsis)() produces the\nEllipsis singleton. It is written as Ellipsis or .... This object is returned from comparisons and binary operations when they are\nasked to operate on types they don’t support. See Comparisons for more\ninformation.  There is exactly one NotImplemented object.\ntype(NotImplemented)() produces the singleton instance. It is written as NotImplemented. See The standard type hierarchy for this information.  It describes\nstack frame objects,\ntraceback objects, and slice objects. The implementation adds a few special read-only attributes to several object\ntypes, where they are relevant.  Some of these are not reported by the\ndir() built-in function. A dictionary or other mapping object used to store an object’s (writable)\nattributes. The class to which a class instance belongs. The tuple of base classes of a class object. The name of the class, function, method, descriptor, or\ngenerator instance. The qualified name of the class, function, method, descriptor,\nor generator instance. Added in version 3.3. The type parameters of generic classes, functions,\nand type aliases. Added in version 3.12. This attribute is a tuple of classes that are considered when looking for\nbase classes during method resolution. This method can be overridden by a metaclass to customize the method\nresolution order for its instances.  It is called at class instantiation, and\nits result is stored in __mro__. Each class keeps a list of weak references to its immediate subclasses.  This\nmethod returns a list of all those references still alive.  The list is in\ndefinition order.  Example: CPython has a global limit for converting between int and str\nto mitigate denial of service attacks. This limit only applies to decimal or\nother non-power-of-two number bases. Hexadecimal, octal, and binary conversions\nare unlimited. The limit can be configured. The int type in CPython is an arbitrary length number stored in binary\nform (commonly known as a “bignum”). There exists no algorithm that can convert\na string to a binary integer or a binary integer to a string in linear time,\nunless the base is a power of 2. Even the best known algorithms for base 10\nhave sub-quadratic complexity. Converting a large value such as int('1' *\n500_000) can take over a second on a fast CPU. Limiting conversion size offers a practical way to avoid CVE-2020-10735. The limit is applied to the number of digit characters in the input or output\nstring when a non-linear conversion algorithm would be involved.  Underscores\nand the sign are not counted towards the limit. When an operation would exceed the limit, a ValueError is raised: The default limit is 4300 digits as provided in\nsys.int_info.default_max_str_digits.\nThe lowest limit that can be configured is 640 digits as provided in\nsys.int_info.str_digits_check_threshold. Verification: Added in version 3.11. The limitation only applies to potentially slow conversions between int\nand str or bytes: int(string) with default base 10. int(string, base) for all bases that are not a power of 2. str(integer). repr(integer). any other string conversion to base 10, for example f\"{integer}\",\n\"{}\".format(integer), or b\"%d\" % integer. The limitations do not apply to functions with a linear algorithm: int(string, base) with base 2, 4, 8, 16, or 32. int.from_bytes() and int.to_bytes(). hex(), oct(), bin(). Format Specification Mini-Language for hex, octal, and binary numbers. str to float. str to decimal.Decimal. Before Python starts up you can use an environment variable or an interpreter\ncommand line flag to configure the limit: PYTHONINTMAXSTRDIGITS, e.g.\nPYTHONINTMAXSTRDIGITS=640 python3 to set the limit to 640 or\nPYTHONINTMAXSTRDIGITS=0 python3 to disable the limitation. -X int_max_str_digits, e.g.\npython3 -X int_max_str_digits=640 sys.flags.int_max_str_digits contains the value of\nPYTHONINTMAXSTRDIGITS or -X int_max_str_digits.\nIf both the env var and the -X option are set, the -X option takes\nprecedence. A value of -1 indicates that both were unset, thus a value of\nsys.int_info.default_max_str_digits was used during initialization. From code, you can inspect the current limit and set a new one using these\nsys APIs: sys.get_int_max_str_digits() and sys.set_int_max_str_digits() are\na getter and setter for the interpreter-wide limit. Subinterpreters have\ntheir own limit. Information about the default and minimum can be found in sys.int_info: sys.int_info.default_max_str_digits is the compiled-in\ndefault limit. sys.int_info.str_digits_check_threshold is the lowest\naccepted value for the limit (other than 0 which disables it). Added in version 3.11. Caution Setting a low limit can lead to problems. While rare, code exists that\ncontains integer constants in decimal in their source that exceed the\nminimum threshold. A consequence of setting the limit is that Python source\ncode containing decimal integer literals longer than the limit will\nencounter an error during parsing, usually at startup time or import time or\neven at installation time - anytime an up to date .pyc does not already\nexist for the code. A workaround for source that contains such large\nconstants is to convert them to 0x hexadecimal form as it has no limit. Test your application thoroughly if you use a low limit. Ensure your tests\nrun with the limit set early via the environment or flag so that it applies\nduring startup and even during any installation step that may invoke Python\nto precompile .py sources to .pyc files. The default sys.int_info.default_max_str_digits is expected to be\nreasonable for most applications. If your application requires a different\nlimit, set it from your main entry point using Python version agnostic code as\nthese APIs were added in security patch releases in versions before 3.12. Example: If you need to disable it entirely, set it to 0. Footnotes Additional information on these special methods may be found in the Python\nReference Manual (Basic customization). As a consequence, the list [1, 2] is considered equal to [1.0, 2.0], and\nsimilarly for tuples. They must have since the parser can’t tell the type of the operands. Cased characters are those with general category property being one of\n“Lu” (Letter, uppercase), “Ll” (Letter, lowercase), or “Lt” (Letter, titlecase). To format only a tuple you should therefore provide a singleton tuple whose only\nelement is the tuple to be formatted. Built-in Constants Built-in ExceptionsBuilt-in Types¶Truth Value Testing¶ Boolean Operations — and, or, not¶ Comparisons¶ Numeric Types — int, float, complex¶ Boolean Type - bool¶ Iterator Types¶ Sequence Types — list, tuple, range¶ Text Sequence Type — str¶ Binary Sequence Types — bytes, bytearray, memoryview¶ Set Types — set, frozenset¶ Mapping Types — dict¶ Context Manager Types¶ Type Annotation Types — Generic Alias, Union¶ Other Built-in Types¶ Special Attributes¶ Integer string conversion length limitation¶Table of Contents This Page Navigation Bitwise Operations on Integer Types¶ Additional Methods on Integer Types¶ Additional Methods on Float¶ Hashing of numeric types¶ Generator Types¶ Common Sequence Operations¶ Immutable Sequence Types¶ Mutable Sequence Types¶ Lists¶ Tuples¶ Ranges¶ String Methods¶ printf-style String Formatting¶ Bytes Objects¶ Bytearray Objects¶ Bytes and Bytearray Operations¶ printf-style Bytes Formatting¶ Memory Views¶ Dictionary view objects¶ Generic Alias Type¶ Union Type¶ Modules¶ Classes and Class Instances¶ Functions¶ Methods¶ Code Objects¶ Type Objects¶ The Null Object¶ The Ellipsis Object¶ The NotImplemented Object¶ Internal Objects¶ Affected APIs¶ Configuring the limit¶ Recommended configuration¶ Table of Contents This Page NavigationPrevious topic Next topic Standard Generic Classes¶ Special Attributes of GenericAlias objects¶ Previous topic Next topicand or not int float complex bool list tuple range str printf bytes bytearray memoryview printf set frozenset dict GenericAlias None repr() str() print() if while __bool__() False __len__() None False 0 0.0 0j Decimal(0) Fraction(0, 1) '' () [] {} set() range(0) 0 False 1 True or and and or not x or y x and y not x True False not not a == b not (a == b) a == not b x < y <= z x < y and\ny <= z x < y < <= > >= == != is is not == is < <= > >= TypeError __eq__() __lt__() __le__() __gt__() __ge__() __lt__() __eq__() is is not in not in __contains__() int float complex sys.float_info z.real z.imag fractions.Fraction decimal.Decimal 'j' 'J' int() float() complex() x + y x - y x * y x / y x // y x % y x / y -x +x abs(x) abs() int(x) int() float(x) float() complex(re, im) complex() c.conjugate() divmod(x, y) (x // y, x % y) divmod() pow(x, y) pow() x ** y int int float float int 1//2 0 (-1)//2 -1 1//(-2) -1 (-1)//(-2) 0 abs() float int math.floor() math.ceil() pow(0, 0) 0 ** 0 1 0 9 Nd Nd numbers.Real int float math.trunc(x) Integral round(x[,\nn]) math.floor(x) Integral math.ceil(x) Integral math cmath ~ + - x | y x ^ y x & y x << n x >> n ~x ValueError pow(2, n) pow(2, n) 1 + max(x.bit_length(), y.bit_length()) numbers.Integral x x.bit_length() k 2**(k-1) <= abs(x) < 2**k abs(x) k = 1 + int(log(abs(x), 2)) x x.bit_length() 0 OverflowError \"big\" \"big\" \"little\" False OverflowError False OverflowError length byteorder \"big\" \"big\" \"little\" sys.byteorder byteorder 1 True float.is_integer() numbers.Real OverflowError ValueError True False 0x p float.hex() float.fromhex() sign + - integer fraction exponent float.hex() %a Double.toHexString float.fromhex() 0x3.a7p10 (3 + 10./16 + 7./16**2) * 2.0**10 3740.0 3740.0 x y hash(x) == hash(y) x == y __hash__() int float decimal.Decimal fractions.Fraction int fractions.Fraction float decimal.Decimal P P P modulus sys.hash_info P = 2**31 - 1 P = 2**61 - 1 x = m / n n P hash(x) m * invmod(n, P) % P invmod(n,\nP) n P x = m / n n P m n P hash(x) sys.hash_info.inf x = m / n hash(x) -hash(-x) -1 -2 sys.hash_info.inf -sys.hash_info.inf complex z hash(z.real) +\nsys.hash_info.imag * hash(z.imag) 2**sys.hash_info.width range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width -\n1)) -1 -2 float complex bool bool True False bool() and or not & | ^ and or != & | ^ ~ bool int False True int() tp_iter for in tp_iter StopIteration tp_iternext __next__() StopIteration __iter__() __iter__() __next__() list tuple range collections.abc.Sequence in not in + * x in s True False x not in s False True s + t s * n n * s s[i] s[i:j] s[i:j:k] len(s) min(s) max(s) s.index(x[, i[, j]]) s.count(x) IndexError StopIteration in not in str bytes bytearray 0 0 [[]] [[]] * 3 lists len(s) + i len(s) + j -0 0 i <= k < j len(s) len(s) None 0 None len(s) x = i + n*k 0 <= n < (j-i)/k i i+k i+2*k i+3*k len(s) len(s) - 1 None None 1 str str.join() io.StringIO bytes bytes.join() io.BytesIO bytearray bytearray tuple list range index ValueError s[i:j].index(x) hash() tuple dict set frozenset TypeError collections.abc.MutableSequence bytearray 0 <= x <= 255 s[i] = x s[i:j] = t del s[i:j] s[i:j] = [] s[i:j:k] = t s[i:j:k] del s[i:j:k] s[i:j:k] s.append(x) s[len(s):len(s)] = [x] s.clear() del s[:] s.copy() s[:] s.extend(t) s += t s[len(s):len(s)] = t s *= n s.insert(i, x) s[i:i] = [x] s.pop() s.pop(i) s.remove(x) s[i] s.reverse() 1 -1 remove() ValueError reverse() clear() copy() dict set copy() collections.abc.MutableSequence clear() copy() __index__() s * n [] [a] [a, b, c] [x for x in iterable] list() list(iterable) iterable[:] list('abc') ['a', 'b', 'c'] list( (1, 2, 3) ) [1, 2, 3] [] sorted() < sort() key=str.lower None functools.cmp_to_key() True sorted() sort() ValueError enumerate() set dict () a, (a,) a, b, c (a, b, c) tuple() tuple() tuple(iterable) tuple('abc') ('a', 'b', 'c') tuple( [1, 2, 3] ) (1, 2, 3) () f(a, b, c) f((a, b, c)) collections.namedtuple() range for int __index__() 1 0 ValueError r r[i] = start + step*i i >= 0 r[i] < stop r[i] = start + step*i i >= 0 r[i] > stop r[0] sys.maxsize len() OverflowError 0 1 range list tuple range start stop step collections.abc.Sequence == != start stop step range(0) == range(2, 1, 3) range(0, 3, 2) == range(0, 4, 2) int start stop step str str 'allows embedded \"double\" quotes' \"allows embedded 'single' quotes\" '''Three single quotes''' \"\"\"Three double quotes\"\"\" (\"spam \" \"eggs\") == \"spam eggs\" r str s[0] == s[0:1] str.join() io.StringIO u r str() str(object) type(object).__str__(object) __str__() str() repr(object) bytes bytearray bytes bytearray str(bytes, encoding, errors) bytes.decode(encoding, errors) bytes.decode() bytes str() -b str str.format() printf re 'ß' \"ss\" lower() 'ß' casefold() \"ss\" len(s) bytes 'utf-8' 'strict' UnicodeError 'ignore' 'replace' 'xmlcharrefreplace' 'backslashreplace' codecs.register_error() True False \\t \\n \\r s[start:end] -1 find() in {} int float complex decimal.Decimal n '{:n}'.format(1234) LC_CTYPE LC_NUMERIC decimal_point thousands_sep localeconv() LC_NUMERIC LC_CTYPE n LC_CTYPE LC_NUMERIC str.format(**mapping) mapping dict mapping find() ValueError True False c True c.isalpha() c.isdecimal() c.isdigit() c.isnumeric() True False True False True False True False True keyword.iskeyword() s def class True False True False True False repr() sys.stdout sys.stderr True False unicodedata Zs WS B S True False True False TypeError bytes len(s) None str.removeprefix() str.translate() None None string[len(prefix):] string[:-len(suffix)] s[start:end] -1 rfind() ValueError len(s) None rsplit() split() None str.removesuffix() maxsplit+1 -1 '1,,2'.split(',') ['1', '', '2'] re.split() [''] None None [] \\n \\r \\r\\n \\v \\x0b \\f \\x0c \\x1c \\x1d \\x1e \\x85 \\u2028 \\u2029 \\v \\f split() split('\\n') True False None s.swapcase().swapcase() == s string.capwords() __getitem__() None LookupError str.maketrans() codecs s.upper().isupper() False s '0' '+' '-' len(s) printf str.format() % format % values % sprintf() '%' (somename) '*' '.' '*' '%' * '#' '0' '-' '0' ' ' '+' '+' '-' h l L %ld %d 'd' 'i' 'o' 'u' 'd' 'x' 'X' 'e' 'E' 'f' 'F' 'g' 'G' 'c' 'r' repr() 's' str() 'a' ascii() '%' '%' '0o' '0x' '0X' 'x' 'X' N N %s '\\0' %f %g bytes bytearray memoryview bytes bytearray memoryview array b b'still allows embedded \"double\" quotes' b\"still allows embedded 'single' quotes\" b'''3 single quotes''' b\"\"\"3 double quotes\"\"\" r 0 <= x < 256 ValueError bytes(10) bytes(range(20)) bytes(obj) bytes bytes.fromhex() bytes.hex() b[0] b[0:1] b'...' bytes([46, 46, 46]) list(b) bytearray bytes bytearray() bytearray(10) bytearray(range(20)) bytearray(b'Hi!') bytearray bytearray.fromhex() bytes.hex() bytearray.hex() b[0] b[0:1] bytearray(b'...') bytearray([46, 46, 46]) list(b) bytes[len(prefix):] bytes[:-len(suffix)] str 'utf-8' 'strict' UnicodeError 'ignore' 'replace' codecs.register_error() str bytes bytearray True False s[start:end] -1 find() in find() ValueError TypeError str bytes.translate() s[start:end] -1 rfind() ValueError True False bytes.maketrans() None bytes len(s) bytes len(s) None removeprefix() bytes len(s) None rsplit() split() None removesuffix() maxsplit+1 -1 b'1,,2'.split(b',') [b'1', b'', b'2'] [b''] [bytearray(b'')] None [] None b'\\t' b'\\n' b'\\r' True False b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' b'0123456789' True False b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' True False True False b'0123456789' True False b'abcdefghijklmnopqrstuvwxyz' b'ABCDEFGHIJKLMNOPQRSTUVWXYZ' True False b' \\t\\n\\r\\x0b\\f' True False bytes.title() True False b'abcdefghijklmnopqrstuvwxyz' b'ABCDEFGHIJKLMNOPQRSTUVWXYZ' b'abcdefghijklmnopqrstuvwxyz' b'ABCDEFGHIJKLMNOPQRSTUVWXYZ' split() b'abcdefghijklmnopqrstuvwxyz' b'ABCDEFGHIJKLMNOPQRSTUVWXYZ' str.swapcase() bin.swapcase().swapcase() == bin b'abcdefghijklmnopqrstuvwxyz' b'ABCDEFGHIJKLMNOPQRSTUVWXYZ' b'abcdefghijklmnopqrstuvwxyz' b'ABCDEFGHIJKLMNOPQRSTUVWXYZ' b'0' b'+' b'-' bytes len(seq) printf bytes bytearray % format % values % sprintf() '%' (somename) '*' '.' '*' '%' * '#' '0' '-' '0' ' ' '+' '+' '-' h l L %ld %d 'd' 'i' 'o' 'u' 'd' 'x' 'X' 'e' 'E' 'f' 'F' 'g' 'G' 'c' 'b' __bytes__() 's' 's' 'b' 'a' repr(obj).encode('ascii', 'backslashreplace') 'r' 'r' 'a' '%' '%' '0o' '0x' '0X' 'x' 'X' N N b'%s' b'%r' memoryview memoryview bytes bytearray memoryview bytes bytearray array.array len(view) tolist view.ndim = 1 view.ndim == 0 len(view) TypeError itemsize memoryview format struct hash(m) == hash(m.tobytes()) collections.abc.Sequence memoryview struct struct tolist() v w v.tolist() == w.tolist() struct v is w v == w bytes tobytes() struct bytes.hex() memoryview.hex() tolist() struct bytearray ValueError release() with [byte_length//new_itemsize] struct nbytes == product(shape) * itemsize == len(m.tobytes()) len(m) struct tolist() 'B' memoryview(b'abc')[0] == b'abc'[0] == 97 ndim None ndim None set frozenset dict list tuple collections x in set len(set) for x in\nset set frozenset set add() remove() frozenset {'jack', 'sjoerd'} set frozenset {'jack', 'sjoerd'} {c for c in 'abracadabra' if c not in 'abc'} set() set('foobar') set(['a', 'b', 'foo']) set frozenset True set <= other and set != other set >=\nother and set != other union() intersection() difference() symmetric_difference() issubset() issuperset() set('abc') & 'cbs' set('abc').intersection('cbs') set frozenset set frozenset set('abc') == frozenset('abc') True set('abc') in set([frozenset('abc')]) False a<b a==b a>b list.sort() set frozenset frozenset('ab') |\nset('bc') frozenset set frozenset KeyError KeyError update() intersection_update() difference_update() symmetric_difference_update() __contains__() remove() discard() dict list set tuple collections 1 1.0 True key: value {'jack': 4098, 'sjoerd': 4127} {4098: 'jack', 4127: 'sjoerd'} {} {x: x ** 2 for x in range(10)} dict() dict([('foo', 100), ('bar', 200)]) dict(foo=100, bar=200) {\"one\": 1, \"two\": 2, \"three\": 3} KeyError __missing__() d[key] d[key] __missing__(key) __missing__() __missing__() KeyError __missing__() collections.Counter __missing__ collections.defaultdict d[key] d[key] KeyError True False not key in d iter(d.keys()) fromkeys() None None KeyError (key, value) KeyError (key, value) popitem() popitem() KeyError popitem() reversed(d.keys()) None None update() d.update(red=1, blue=2) dict.values() False dict.values() (key,\nvalue) TypeError types.MappingProxyType dict dict.keys() dict.values() dict.items() (key, value) (value, key) zip() pairs = zip(d.values(), d.keys()) pairs = [(v, k) for (k, v) in d.items()] RuntimeError True (key, value) types.MappingProxyType collections.abc.Set == < ^ with as with open() with decimal.localcontext() with with with None with with with __exit__() contextlib contextlib.contextmanager contextlib.contextmanager __enter__() __exit__() GenericAlias list dict list[int] GenericAlias list int GenericAlias __class_getitem__() GenericAlias set[bytes] set bytes __class_getitem__() regular expressions str bytes x = re.search('foo', 'foo') x x.group(0) x[0] str GenericAlias re.Match[str] y = re.search(b'bar', b'bar') b bytes y re.Match y.group(0) y[0] bytes re.Match[bytes] GenericAlias types.GenericAlias GenericAlias GenericAlias T T list float dict dict str int isinstance() issubclass() GenericAlias GenericAlias repr() str() __getitem__() dict[str][str] GenericAlias __args__ tuple list dict set frozenset type collections.deque collections.defaultdict collections.OrderedDict collections.Counter collections.ChainMap collections.abc.Awaitable collections.abc.Coroutine collections.abc.AsyncIterable collections.abc.AsyncIterator collections.abc.AsyncGenerator collections.abc.Iterable collections.abc.Iterator collections.abc.Generator collections.abc.Reversible collections.abc.Container collections.abc.Collection collections.abc.Callable collections.abc.Set collections.abc.MutableSet collections.abc.Mapping collections.abc.MutableMapping collections.abc.Sequence collections.abc.MutableSequence collections.abc.ByteString collections.abc.MappingView collections.abc.KeysView collections.abc.ItemsView collections.abc.ValuesView contextlib.AbstractContextManager contextlib.AbstractAsyncContextManager dataclasses.Field functools.cached_property functools.partialmethod os.PathLike queue.LifoQueue queue.Queue queue.PriorityQueue queue.SimpleQueue shelve.BsdDbShelf shelve.DbfilenameShelf shelve.Shelf types.MappingProxyType weakref.WeakKeyDictionary weakref.WeakMethod weakref.WeakSet weakref.WeakValueDictionary GenericAlias tuple __class_getitem__() __args__ GenericAlias typing.ParamSpec __parameters__ typing.ParamSpec * TypeVarTuple __class_getitem__() typing.Generic | typing.Union X | Y typing.Union[X, Y] int float | int | \"Foo\" \"Foo\" \"int | Foo\" typing.Union None isinstance() issubclass() types.UnionType isinstance() __or__() X | Y __or__() X | Y m.name import import\nfoo __dict__ __dict__ m.__dict__['a'] = 1 m.a 1 m.__dict__ = {} __dict__ <module 'sys'\n(built-in)> <module 'os' from\n'/usr/local/lib/pythonX.Y/os.pyc'> func(argument-list) append() self m.__self__ m.__func__ m(arg-1, arg-2, ..., arg-n) m.__func__(m.__self__, arg-1, arg-2, ...,\narg-n) method.__func__ AttributeError compile() __code__ code __code__ object.__getattr__ obj \"__code__\" exec() eval() type() types <class 'int'> None type(None)() None Ellipsis type(Ellipsis)() Ellipsis Ellipsis ... NotImplemented type(NotImplemented)() NotImplemented dir() __mro__ int str int int('1' *\n500_000) ValueError sys.int_info.default_max_str_digits sys.int_info.str_digits_check_threshold int str bytes int(string) int(string, base) str(integer) repr(integer) f\"{integer}\" \"{}\".format(integer) b\"%d\" % integer int(string, base) int.from_bytes() int.to_bytes() hex() oct() bin() str float str decimal.Decimal PYTHONINTMAXSTRDIGITS PYTHONINTMAXSTRDIGITS=640 python3 PYTHONINTMAXSTRDIGITS=0 python3 -X int_max_str_digits python3 -X int_max_str_digits=640 sys.flags.int_max_str_digits PYTHONINTMAXSTRDIGITS -X int_max_str_digits -X -X sys.int_info.default_max_str_digits sys sys.get_int_max_str_digits() sys.set_int_max_str_digits() sys.int_info sys.int_info.default_max_str_digits sys.int_info.str_digits_check_threshold .pyc 0x .py .pyc sys.int_info.default_max_str_digits 0 [1, 2] [1.0, 2.0] and or not int float complex bool list tuple range str printf bytes bytearray memoryview printf set frozenset dict GenericAlias>>> n = -37\n>>> bin(n)\n'-0b100101'\n>>> n.bit_length()\n6\n def bit_length(self):\n    s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'\n    s = s.lstrip('-0b') # remove leading zeros and minus sign\n    return len(s)       # len('100101') --> 6\n >>> n = 19\n>>> bin(n)\n'0b10011'\n>>> n.bit_count()\n3\n>>> (-n).bit_count()\n3\n def bit_count(self):\n    return bin(self).count(\"1\")\n >>> (1024).to_bytes(2, byteorder='big')\nb'\\x04\\x00'\n>>> (1024).to_bytes(10, byteorder='big')\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00'\n>>> (-1024).to_bytes(10, byteorder='big', signed=True)\nb'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x00'\n>>> x = 1000\n>>> x.to_bytes((x.bit_length() + 7) // 8, byteorder='little')\nb'\\xe8\\x03'\n >>> (65).to_bytes()\nb'A'\n def to_bytes(n, length=1, byteorder='big', signed=False):\n    if byteorder == 'little':\n        order = range(length)\n    elif byteorder == 'big':\n        order = reversed(range(length))\n    else:\n        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n\n    return bytes((n >> i*8) & 0xff for i in order)\n >>> int.from_bytes(b'\\x00\\x10', byteorder='big')\n16\n>>> int.from_bytes(b'\\x00\\x10', byteorder='little')\n4096\n>>> int.from_bytes(b'\\xfc\\x00', byteorder='big', signed=True)\n-1024\n>>> int.from_bytes(b'\\xfc\\x00', byteorder='big', signed=False)\n64512\n>>> int.from_bytes([255, 0, 0], byteorder='big')\n16711680\n def from_bytes(bytes, byteorder='big', signed=False):\n    if byteorder == 'little':\n        little_ordered = list(bytes)\n    elif byteorder == 'big':\n        little_ordered = list(reversed(bytes))\n    else:\n        raise ValueError(\"byteorder must be either 'little' or 'big'\")\n\n    n = sum(b << i*8 for i, b in enumerate(little_ordered))\n    if signed and little_ordered and (little_ordered[-1] & 0x80):\n        n -= 1 << 8*len(little_ordered)\n\n    return n\n >>> (-2.0).is_integer()\nTrue\n>>> (3.2).is_integer()\nFalse\n [sign] ['0x'] integer ['.' fraction] ['p' exponent]\n >>> float.fromhex('0x3.a7p10')\n3740.0\n >>> float.hex(3740.0)\n'0x1.d380000000000p+11'\n import sys, math\n\ndef hash_fraction(m, n):\n    \"\"\"Compute the hash of a rational number m / n.\n\n    Assumes m and n are integers, with n positive.\n    Equivalent to hash(fractions.Fraction(m, n)).\n\n    \"\"\"\n    P = sys.hash_info.modulus\n    # Remove common factors of P.  (Unnecessary if m and n already coprime.)\n    while m % P == n % P == 0:\n        m, n = m // P, n // P\n\n    if n % P == 0:\n        hash_value = sys.hash_info.inf\n    else:\n        # Fermat's Little Theorem: pow(n, P-1, P) is 1, so\n        # pow(n, P-2, P) gives the inverse of n modulo P.\n        hash_value = (abs(m) % P) * pow(n, P - 2, P) % P\n    if m < 0:\n        hash_value = -hash_value\n    if hash_value == -1:\n        hash_value = -2\n    return hash_value\n\ndef hash_float(x):\n    \"\"\"Compute the hash of a float x.\"\"\"\n\n    if math.isnan(x):\n        return object.__hash__(x)\n    elif math.isinf(x):\n        return sys.hash_info.inf if x > 0 else -sys.hash_info.inf\n    else:\n        return hash_fraction(*x.as_integer_ratio())\n\ndef hash_complex(z):\n    \"\"\"Compute the hash of a complex number z.\"\"\"\n\n    hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag)\n    # do a signed reduction modulo 2**sys.hash_info.width\n    M = 2**(sys.hash_info.width - 1)\n    hash_value = (hash_value & (M - 1)) - (hash_value & M)\n    if hash_value == -1:\n        hash_value = -2\n    return hash_value\n >>> \"gg\" in \"eggs\"\nTrue\n >>> lists = [[]] * 3\n>>> lists\n[[], [], []]\n>>> lists[0].append(3)\n>>> lists\n[[3], [3], [3]]\n >>> lists = [[] for i in range(3)]\n>>> lists[0].append(3)\n>>> lists[1].append(5)\n>>> lists[2].append(7)\n>>> lists\n[[3], [5], [7]]\n >>> list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list(range(1, 11))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> list(range(0, 30, 5))\n[0, 5, 10, 15, 20, 25]\n>>> list(range(0, 10, 3))\n[0, 3, 6, 9]\n>>> list(range(0, -10, -1))\n[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n>>> list(range(0))\n[]\n>>> list(range(1, 0))\n[]\n >>> r = range(0, 20, 2)\n>>> r\nrange(0, 20, 2)\n>>> 11 in r\nFalse\n>>> 10 in r\nTrue\n>>> r.index(10)\n5\n>>> r[5]\n10\n>>> r[:5]\nrange(0, 10, 2)\n>>> r[-1]\n18\n >>> str(b'Zoot!')\n\"b'Zoot!'\"\n >>> '01\\t012\\t0123\\t01234'.expandtabs()\n'01      012     0123    01234'\n>>> '01\\t012\\t0123\\t01234'.expandtabs(4)\n'01  012 0123    01234'\n >>> 'Py' in 'Python'\nTrue\n >>> \"The sum of 1 + 2 is {0}\".format(1+2)\n'The sum of 1 + 2 is 3'\n >>> class Default(dict):\n...     def __missing__(self, key):\n...         return key\n...\n>>> '{name} was born in {country}'.format_map(Default(name='Guido'))\n'Guido was born in country'\n >>> from keyword import iskeyword\n\n>>> 'hello'.isidentifier(), iskeyword('hello')\n(True, False)\n>>> 'def'.isidentifier(), iskeyword('def')\n(True, True)\n >>> 'BANANA'.isupper()\nTrue\n>>> 'banana'.isupper()\nFalse\n>>> 'baNana'.isupper()\nFalse\n>>> ' '.isupper()\nFalse\n >>> '   spacious   '.lstrip()\n'spacious   '\n>>> 'www.example.com'.lstrip('cmowz.')\n'example.com'\n >>> 'Arthur: three!'.lstrip('Arthur: ')\n'ee!'\n>>> 'Arthur: three!'.removeprefix('Arthur: ')\n'three!'\n >>> 'TestHook'.removeprefix('Test')\n'Hook'\n>>> 'BaseTestCase'.removeprefix('Test')\n'BaseTestCase'\n >>> 'MiscTests'.removesuffix('Tests')\n'Misc'\n>>> 'TmpDirMixin'.removesuffix('Tests')\n'TmpDirMixin'\n >>> '   spacious   '.rstrip()\n'   spacious'\n>>> 'mississippi'.rstrip('ipz')\n'mississ'\n >>> 'Monty Python'.rstrip(' Python')\n'M'\n>>> 'Monty Python'.removesuffix(' Python')\n'Monty'\n >>> '1,2,3'.split(',')\n['1', '2', '3']\n>>> '1,2,3'.split(',', maxsplit=1)\n['1', '2,3']\n>>> '1,2,,3,'.split(',')\n['1', '2', '', '3', '']\n>>> '1<>2<>3<4'.split('<>')\n['1', '2', '3<4']\n >>> '1 2 3'.split()\n['1', '2', '3']\n>>> '1 2 3'.split(maxsplit=1)\n['1', '2 3']\n>>> '   1   2   3   '.split()\n['1', '2', '3']\n >>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n['ab c', '', 'de fg', 'kl']\n>>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']\n >>> \"\".splitlines()\n[]\n>>> \"One line\\n\".splitlines()\n['One line']\n >>> ''.split('\\n')\n['']\n>>> 'Two lines\\n'.split('\\n')\n['Two lines', '']\n >>> '   spacious   '.strip()\n'spacious'\n>>> 'www.example.com'.strip('cmowz.')\n'example'\n >>> comment_string = '#....... Section 3.2.1 Issue #32 .......'\n>>> comment_string.strip('.#! ')\n'Section 3.2.1 Issue #32'\n >>> 'Hello world'.title()\n'Hello World'\n >>> \"they're bill's friends from the UK\".title()\n\"They'Re Bill'S Friends From The Uk\"\n >>> import re\n>>> def titlecase(s):\n...     return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",\n...                   lambda mo: mo.group(0).capitalize(),\n...                   s)\n...\n>>> titlecase(\"they're bill's friends.\")\n\"They're Bill's Friends.\"\n >>> \"42\".zfill(5)\n'00042'\n>>> \"-42\".zfill(5)\n'-0042'\n >>> print('%(language)s has %(number)03d quote types.' %\n...       {'language': \"Python\", \"number\": 2})\nPython has 002 quote types.\n >>> bytes.fromhex('2Ef0 F1f2  ')\nb'.\\xf0\\xf1\\xf2'\n >>> b'\\xf0\\xf1\\xf2'.hex()\n'f0f1f2'\n >>> value = b'\\xf0\\xf1\\xf2'\n>>> value.hex('-')\n'f0-f1-f2'\n>>> value.hex('_', 2)\n'f0_f1f2'\n>>> b'UUDDLRLRAB'.hex(' ', -4)\n'55554444 4c524c52 4142'\n >>> bytearray.fromhex('2Ef0 F1f2  ')\nbytearray(b'.\\xf0\\xf1\\xf2')\n >>> bytearray(b'\\xf0\\xf1\\xf2').hex()\n'f0f1f2'\n a = \"abc\"\nb = a.replace(\"a\", \"f\")\n a = b\"abc\"\nb = a.replace(b\"a\", b\"f\")\n >>> b'TestHook'.removeprefix(b'Test')\nb'Hook'\n>>> b'BaseTestCase'.removeprefix(b'Test')\nb'BaseTestCase'\n >>> b'MiscTests'.removesuffix(b'Tests')\nb'Misc'\n>>> b'TmpDirMixin'.removesuffix(b'Tests')\nb'TmpDirMixin'\n >>> b'Py' in b'Python'\nTrue\n >>> b'read this short text'.translate(None, b'aeiou')\nb'rd ths shrt txt'\n >>> b'   spacious   '.lstrip()\nb'spacious   '\n>>> b'www.example.com'.lstrip(b'cmowz.')\nb'example.com'\n >>> b'Arthur: three!'.lstrip(b'Arthur: ')\nb'ee!'\n>>> b'Arthur: three!'.removeprefix(b'Arthur: ')\nb'three!'\n >>> b'   spacious   '.rstrip()\nb'   spacious'\n>>> b'mississippi'.rstrip(b'ipz')\nb'mississ'\n >>> b'Monty Python'.rstrip(b' Python')\nb'M'\n>>> b'Monty Python'.removesuffix(b' Python')\nb'Monty'\n >>> b'1,2,3'.split(b',')\n[b'1', b'2', b'3']\n>>> b'1,2,3'.split(b',', maxsplit=1)\n[b'1', b'2,3']\n>>> b'1,2,,3,'.split(b',')\n[b'1', b'2', b'', b'3', b'']\n>>> b'1<>2<>3<4'.split(b'<>')\n[b'1', b'2', b'3<4']\n >>> b'1 2 3'.split()\n[b'1', b'2', b'3']\n>>> b'1 2 3'.split(maxsplit=1)\n[b'1', b'2 3']\n>>> b'   1   2   3   '.split()\n[b'1', b'2', b'3']\n >>> b'   spacious   '.strip()\nb'spacious'\n>>> b'www.example.com'.strip(b'cmowz.')\nb'example'\n >>> b'01\\t012\\t0123\\t01234'.expandtabs()\nb'01      012     0123    01234'\n>>> b'01\\t012\\t0123\\t01234'.expandtabs(4)\nb'01  012 0123    01234'\n >>> b'ABCabc1'.isalnum()\nTrue\n>>> b'ABC abc1'.isalnum()\nFalse\n >>> b'ABCabc'.isalpha()\nTrue\n>>> b'ABCabc1'.isalpha()\nFalse\n >>> b'1234'.isdigit()\nTrue\n>>> b'1.23'.isdigit()\nFalse\n >>> b'hello world'.islower()\nTrue\n>>> b'Hello world'.islower()\nFalse\n >>> b'Hello World'.istitle()\nTrue\n>>> b'Hello world'.istitle()\nFalse\n >>> b'HELLO WORLD'.isupper()\nTrue\n>>> b'Hello world'.isupper()\nFalse\n >>> b'Hello World'.lower()\nb'hello world'\n >>> b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n[b'ab c', b'', b'de fg', b'kl']\n>>> b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n[b'ab c\\n', b'\\n', b'de fg\\r', b'kl\\r\\n']\n >>> b\"\".split(b'\\n'), b\"Two lines\\n\".split(b'\\n')\n([b''], [b'Two lines', b''])\n>>> b\"\".splitlines(), b\"One line\\n\".splitlines()\n([], [b'One line'])\n >>> b'Hello World'.swapcase()\nb'hELLO wORLD'\n >>> b'Hello world'.title()\nb'Hello World'\n >>> b\"they're bill's friends from the UK\".title()\nb\"They'Re Bill'S Friends From The Uk\"\n >>> import re\n>>> def titlecase(s):\n...     return re.sub(rb\"[A-Za-z]+('[A-Za-z]+)?\",\n...                   lambda mo: mo.group(0)[0:1].upper() +\n...                              mo.group(0)[1:].lower(),\n...                   s)\n...\n>>> titlecase(b\"they're bill's friends.\")\nb\"They're Bill's Friends.\"\n >>> b'Hello World'.upper()\nb'HELLO WORLD'\n >>> b\"42\".zfill(5)\nb'00042'\n>>> b\"-42\".zfill(5)\nb'-0042'\n >>> print(b'%(language)s has %(number)03d quote types.' %\n...       {b'language': b\"Python\", b\"number\": 2})\nb'Python has 002 quote types.'\n >>> v = memoryview(b'abcefg')\n>>> v[1]\n98\n>>> v[-1]\n103\n>>> v[1:4]\n<memory at 0x7f3ddc9f4350>\n>>> bytes(v[1:4])\nb'bce'\n >>> import array\n>>> a = array.array('l', [-11111111, 22222222, -33333333, 44444444])\n>>> m = memoryview(a)\n>>> m[0]\n-11111111\n>>> m[-1]\n44444444\n>>> m[::2].tolist()\n[-11111111, -33333333]\n >>> data = bytearray(b'abcefg')\n>>> v = memoryview(data)\n>>> v.readonly\nFalse\n>>> v[0] = ord(b'z')\n>>> data\nbytearray(b'zbcefg')\n>>> v[1:4] = b'123'\n>>> data\nbytearray(b'z123fg')\n>>> v[2:3] = b'spam'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: memoryview assignment: lvalue and rvalue have different structures\n>>> v[2:6] = b'spam'\n>>> data\nbytearray(b'z1spam')\n >>> v = memoryview(b'abcefg')\n>>> hash(v) == hash(b'abcefg')\nTrue\n>>> hash(v[2:4]) == hash(b'ce')\nTrue\n>>> hash(v[::-2]) == hash(b'abcefg'[::-2])\nTrue\n >>> import array\n>>> a = array.array('I', [1, 2, 3, 4, 5])\n>>> b = array.array('d', [1.0, 2.0, 3.0, 4.0, 5.0])\n>>> c = array.array('b', [5, 3, 1])\n>>> x = memoryview(a)\n>>> y = memoryview(b)\n>>> x == a == y == b\nTrue\n>>> x.tolist() == a.tolist() == y.tolist() == b.tolist()\nTrue\n>>> z = y[::-2]\n>>> z == c\nTrue\n>>> z.tolist() == c.tolist()\nTrue\n >>> from ctypes import BigEndianStructure, c_long\n>>> class BEPoint(BigEndianStructure):\n...     _fields_ = [(\"x\", c_long), (\"y\", c_long)]\n...\n>>> point = BEPoint(100, 200)\n>>> a = memoryview(point)\n>>> b = memoryview(point)\n>>> a == point\nFalse\n>>> a == b\nFalse\n >>> m = memoryview(b\"abc\")\n>>> m.tobytes()\nb'abc'\n>>> bytes(m)\nb'abc'\n >>> m = memoryview(b\"abc\")\n>>> m.hex()\n'616263'\n >>> memoryview(b'abc').tolist()\n[97, 98, 99]\n>>> import array\n>>> a = array.array('d', [1.1, 2.2, 3.3])\n>>> m = memoryview(a)\n>>> m.tolist()\n[1.1, 2.2, 3.3]\n >>> m = memoryview(bytearray(b'abc'))\n>>> mm = m.toreadonly()\n>>> mm.tolist()\n[97, 98, 99]\n>>> mm[0] = 42\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: cannot modify read-only memory\n>>> m[0] = 43\n>>> mm.tolist()\n[43, 98, 99]\n >>> m = memoryview(b'abc')\n>>> m.release()\n>>> m[0]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: operation forbidden on released memoryview object\n >>> with memoryview(b'abc') as m:\n...     m[0]\n...\n97\n>>> m[0]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: operation forbidden on released memoryview object\n >>> import array\n>>> a = array.array('l', [1,2,3])\n>>> x = memoryview(a)\n>>> x.format\n'l'\n>>> x.itemsize\n8\n>>> len(x)\n3\n>>> x.nbytes\n24\n>>> y = x.cast('B')\n>>> y.format\n'B'\n>>> y.itemsize\n1\n>>> len(y)\n24\n>>> y.nbytes\n24\n >>> b = bytearray(b'zyz')\n>>> x = memoryview(b)\n>>> x[0] = b'a'\nTraceback (most recent call last):\n  ...\nTypeError: memoryview: invalid type for format 'B'\n>>> y = x.cast('c')\n>>> y[0] = b'a'\n>>> b\nbytearray(b'ayz')\n >>> import struct\n>>> buf = struct.pack(\"i\"*12, *list(range(12)))\n>>> x = memoryview(buf)\n>>> y = x.cast('i', shape=[2,2,3])\n>>> y.tolist()\n[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]\n>>> y.format\n'i'\n>>> y.itemsize\n4\n>>> len(y)\n2\n>>> y.nbytes\n48\n>>> z = y.cast('b')\n>>> z.format\n'b'\n>>> z.itemsize\n1\n>>> len(z)\n48\n>>> z.nbytes\n48\n >>> buf = struct.pack(\"L\"*6, *list(range(6)))\n>>> x = memoryview(buf)\n>>> y = x.cast('L', shape=[2,3])\n>>> len(y)\n2\n>>> y.nbytes\n48\n>>> y.tolist()\n[[0, 1, 2], [3, 4, 5]]\n >>> b  = bytearray(b'xyz')\n>>> m = memoryview(b)\n>>> m.obj is b\nTrue\n >>> import array\n>>> a = array.array('i', [1,2,3,4,5])\n>>> m = memoryview(a)\n>>> len(m)\n5\n>>> m.nbytes\n20\n>>> y = m[::2]\n>>> len(y)\n3\n>>> y.nbytes\n12\n>>> len(y.tobytes())\n12\n >>> import struct\n>>> buf = struct.pack(\"d\"*12, *[1.5*x for x in range(12)])\n>>> x = memoryview(buf)\n>>> y = x.cast('d', shape=[3,4])\n>>> y.tolist()\n[[0.0, 1.5, 3.0, 4.5], [6.0, 7.5, 9.0, 10.5], [12.0, 13.5, 15.0, 16.5]]\n>>> len(y)\n3\n>>> y.nbytes\n96\n >>> import array, struct\n>>> m = memoryview(array.array('H', [32000, 32001, 32002]))\n>>> m.itemsize\n2\n>>> m[0]\n32000\n>>> struct.calcsize('H') == m.itemsize\nTrue\n >>> a = dict(one=1, two=2, three=3)\n>>> b = {'one': 1, 'two': 2, 'three': 3}\n>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n>>> d = dict([('two', 2), ('one', 1), ('three', 3)])\n>>> e = dict({'three': 3, 'one': 1, 'two': 2})\n>>> f = dict({'one': 1, 'three': 3}, two=2)\n>>> a == b == c == d == e == f\nTrue\n >>> class Counter(dict):\n...     def __missing__(self, key):\n...         return 0\n...\n>>> c = Counter()\n>>> c['red']\n0\n>>> c['red'] += 1\n>>> c['red']\n1\n >>> d = {'a': 1}\n>>> d.values() == d.values()\nFalse\n >>> d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n>>> d\n{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n>>> list(d)\n['one', 'two', 'three', 'four']\n>>> list(d.values())\n[1, 2, 3, 4]\n>>> d[\"one\"] = 42\n>>> d\n{'one': 42, 'two': 2, 'three': 3, 'four': 4}\n>>> del d[\"two\"]\n>>> d[\"two\"] = None\n>>> d\n{'one': 42, 'three': 3, 'four': 4, 'two': None}\n >>> d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n>>> d\n{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n>>> list(reversed(d))\n['four', 'three', 'two', 'one']\n>>> list(reversed(d.values()))\n[4, 3, 2, 1]\n>>> list(reversed(d.items()))\n[('four', 4), ('three', 3), ('two', 2), ('one', 1)]\n >>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}\n>>> keys = dishes.keys()\n>>> values = dishes.values()\n\n>>> # iteration\n>>> n = 0\n>>> for val in values:\n...     n += val\n...\n>>> print(n)\n504\n\n>>> # keys and values are iterated over in the same order (insertion order)\n>>> list(keys)\n['eggs', 'sausage', 'bacon', 'spam']\n>>> list(values)\n[2, 1, 1, 500]\n\n>>> # view objects are dynamic and reflect dict changes\n>>> del dishes['eggs']\n>>> del dishes['sausage']\n>>> list(keys)\n['bacon', 'spam']\n\n>>> # set operations\n>>> keys & {'eggs', 'bacon', 'salad'}\n{'bacon'}\n>>> keys ^ {'sausage', 'juice'} == {'juice', 'sausage', 'bacon', 'spam'}\nTrue\n>>> keys | ['juice', 'juice', 'juice'] == {'bacon', 'spam', 'juice'}\nTrue\n\n>>> # get back a read-only proxy for the original dictionary\n>>> values.mapping\nmappingproxy({'bacon': 1, 'spam': 500})\n>>> values.mapping['spam']\n500\n def average(values: list[float]) -> float:\n    return sum(values) / len(values)\n def send_post_request(url: str, body: dict[str, int]) -> None:\n    ...\n >>> isinstance([1, 2], list[str])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: isinstance() argument 2 cannot be a parameterized generic\n >>> t = list[str]\n>>> t([1, 2, 3])\n[1, 2, 3]\n >>> t = list[str]\n>>> type(t)\n<class 'types.GenericAlias'>\n\n>>> l = t()\n>>> type(l)\n<class 'list'>\n >>> repr(list[int])\n'list[int]'\n\n>>> str(list[int])\n'list[int]'\n >>> dict[str][str]\nTraceback (most recent call last):\n  ...\nTypeError: dict[str] is not a generic class\n >>> from typing import TypeVar\n>>> Y = TypeVar('Y')\n>>> dict[str, Y][int]\ndict[str, int]\n >>> list[int].__origin__\n<class 'list'>\n >>> dict[str, list[int]].__args__\n(<class 'str'>, list[int])\n >>> from typing import TypeVar\n\n>>> T = TypeVar('T')\n>>> list[T].__parameters__\n(~T,)\n def square(number: int | float) -> int | float:\n    return number ** 2\n (int | str) | float == int | str | float\n int | str | int == int | str\n int | str == str | int\n int | str == typing.Union[int, str]\n str | None == typing.Optional[str]\n >>> isinstance(\"\", int | str)\nTrue\n >>> isinstance(1, int | list[int])  # short-circuit evaluation\nTrue\n>>> isinstance([1], int | list[int])\nTraceback (most recent call last):\n  ...\nTypeError: isinstance() argument 2 cannot be a parameterized generic\n >>> import types\n>>> isinstance(int | str, types.UnionType)\nTrue\n>>> types.UnionType()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: cannot create 'types.UnionType' instances\n >>> class M(type):\n...     def __or__(self, other):\n...         return \"Hello\"\n...\n>>> class C(metaclass=M):\n...     pass\n...\n>>> C | int\n'Hello'\n>>> int | C\nint | C\n >>> class C:\n...     def method(self):\n...         pass\n...\n>>> c = C()\n>>> c.method.whoami = 'my name is method'  # can't set on the method\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'method' object has no attribute 'whoami'\n>>> c.method.__func__.whoami = 'my name is method'\n>>> c.method.whoami\n'my name is method'\n >>> int.__subclasses__()\n[<class 'bool'>, <enum 'IntEnum'>, <flag 'IntFlag'>, <class 're._constants._NamedIntConstant'>]\n >>> import sys\n>>> sys.set_int_max_str_digits(4300)  # Illustrative, this is the default.\n>>> _ = int('2' * 5432)\nTraceback (most recent call last):\n...\nValueError: Exceeds the limit (4300 digits) for integer string conversion: value has 5432 digits; use sys.set_int_max_str_digits() to increase the limit\n>>> i = int('2' * 4300)\n>>> len(str(i))\n4300\n>>> i_squared = i*i\n>>> len(str(i_squared))\nTraceback (most recent call last):\n...\nValueError: Exceeds the limit (4300 digits) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit\n>>> len(hex(i_squared))\n7144\n>>> assert int(hex(i_squared), base=16) == i*i  # Hexadecimal is unlimited.\n >>> import sys\n>>> assert sys.int_info.default_max_str_digits == 4300, sys.int_info\n>>> assert sys.int_info.str_digits_check_threshold == 640, sys.int_info\n>>> msg = int('578966293710682886880994035146873798396722250538762761564'\n...           '9252925514383915483333812743580549779436104706260696366600'\n...           '571186405732').to_bytes(53, 'big')\n...\n >>> import sys\n>>> if hasattr(sys, \"set_int_max_str_digits\"):\n...     upper_bound = 68000\n...     lower_bound = 4004\n...     current_limit = sys.get_int_max_str_digits()\n...     if current_limit == 0 or current_limit > upper_bound:\n...         sys.set_int_max_str_digits(upper_bound)\n...     elif current_limit < lower_bound:\n...         sys.set_int_max_str_digits(lower_bound)\n"
    }
  ]
}

